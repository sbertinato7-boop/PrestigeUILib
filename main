-- ========================================
-- PRESTIGE UI LIBRARY (Complete Rewrite)
-- ========================================

local PrestigeUI = {}
PrestigeUI.__index = PrestigeUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local ThemePresets = {
    Dark = {
        Primary = Color3.fromRGB(0, 180, 255),
        Secondary = Color3.fromRGB(22, 22, 25),
        Tertiary = Color3.fromRGB(28, 28, 32),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 190),
        Dark = Color3.fromRGB(18, 18, 20),
        Accent = Color3.fromRGB(255, 100, 100)
    },
    Ocean = {
        Primary = Color3.fromRGB(52, 152, 219),
        Secondary = Color3.fromRGB(20, 30, 48),
        Tertiary = Color3.fromRGB(30, 40, 58),
        Text = Color3.fromRGB(236, 240, 241),
        TextSecondary = Color3.fromRGB(149, 165, 166),
        Dark = Color3.fromRGB(15, 25, 40),
        Accent = Color3.fromRGB(46, 204, 113)
    },
    Sunset = {
        Primary = Color3.fromRGB(255, 107, 107),
        Secondary = Color3.fromRGB(40, 30, 35),
        Tertiary = Color3.fromRGB(50, 38, 43),
        Text = Color3.fromRGB(255, 250, 240),
        TextSecondary = Color3.fromRGB(200, 180, 170),
        Dark = Color3.fromRGB(30, 22, 28),
        Accent = Color3.fromRGB(255, 159, 64)
    },
    Forest = {
        Primary = Color3.fromRGB(46, 213, 115),
        Secondary = Color3.fromRGB(25, 35, 30),
        Tertiary = Color3.fromRGB(32, 42, 37),
        Text = Color3.fromRGB(245, 255, 250),
        TextSecondary = Color3.fromRGB(160, 180, 170),
        Dark = Color3.fromRGB(18, 28, 23),
        Accent = Color3.fromRGB(255, 195, 18)
    },
    Midnight = {
        Primary = Color3.fromRGB(138, 43, 226),
        Secondary = Color3.fromRGB(15, 15, 25),
        Tertiary = Color3.fromRGB(20, 20, 32),
        Text = Color3.fromRGB(240, 240, 255),
        TextSecondary = Color3.fromRGB(150, 150, 180),
        Dark = Color3.fromRGB(10, 10, 18),
        Accent = Color3.fromRGB(255, 71, 87)
    },
    Purple = {
        Primary = Color3.fromRGB(155, 89, 182),
        Secondary = Color3.fromRGB(30, 25, 35),
        Tertiary = Color3.fromRGB(38, 32, 43),
        Text = Color3.fromRGB(250, 245, 255),
        TextSecondary = Color3.fromRGB(180, 170, 190),
        Dark = Color3.fromRGB(22, 18, 28),
        Accent = Color3.fromRGB(255, 118, 117)
    },
    Cyberpunk = {
        Primary = Color3.fromRGB(255, 0, 255),
        Secondary = Color3.fromRGB(15, 15, 20),
        Tertiary = Color3.fromRGB(25, 25, 35),
        Text = Color3.fromRGB(0, 255, 255),
        TextSecondary = Color3.fromRGB(255, 0, 150),
        Dark = Color3.fromRGB(10, 10, 15),
        Accent = Color3.fromRGB(255, 255, 0)
    },
    Neon = {
        Primary = Color3.fromRGB(57, 255, 20),
        Secondary = Color3.fromRGB(10, 10, 10),
        Tertiary = Color3.fromRGB(20, 20, 20),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(57, 255, 20),
        Dark = Color3.fromRGB(5, 5, 5),
        Accent = Color3.fromRGB(255, 20, 147)
    },
    Minimal = {
        Primary = Color3.fromRGB(100, 100, 100),
        Secondary = Color3.fromRGB(245, 245, 245),
        Tertiary = Color3.fromRGB(235, 235, 235),
        Text = Color3.fromRGB(50, 50, 50),
        TextSecondary = Color3.fromRGB(120, 120, 120),
        Dark = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(200, 200, 200)
    },
    Dracula = {
        Primary = Color3.fromRGB(189, 147, 249),
        Secondary = Color3.fromRGB(40, 42, 54),
        Tertiary = Color3.fromRGB(68, 71, 90),
        Text = Color3.fromRGB(248, 248, 242),
        TextSecondary = Color3.fromRGB(98, 114, 164),
        Dark = Color3.fromRGB(33, 34, 44),
        Accent = Color3.fromRGB(255, 121, 198)
    },
    Nord = {
        Primary = Color3.fromRGB(136, 192, 208),
        Secondary = Color3.fromRGB(46, 52, 64),
        Tertiary = Color3.fromRGB(59, 66, 82),
        Text = Color3.fromRGB(236, 239, 244),
        TextSecondary = Color3.fromRGB(216, 222, 233),
        Dark = Color3.fromRGB(36, 40, 50),
        Accent = Color3.fromRGB(191, 97, 106)
    },
    Monokai = {
        Primary = Color3.fromRGB(249, 38, 114),
        Secondary = Color3.fromRGB(39, 40, 34),
        Tertiary = Color3.fromRGB(73, 72, 62),
        Text = Color3.fromRGB(248, 248, 242),
        TextSecondary = Color3.fromRGB(117, 113, 94),
        Dark = Color3.fromRGB(30, 31, 26),
        Accent = Color3.fromRGB(166, 226, 46)
    },
    Gruvbox = {
        Primary = Color3.fromRGB(254, 128, 25),
        Secondary = Color3.fromRGB(40, 40, 40),
        Tertiary = Color3.fromRGB(60, 56, 54),
        Text = Color3.fromRGB(235, 219, 178),
        TextSecondary = Color3.fromRGB(168, 153, 132),
        Dark = Color3.fromRGB(29, 32, 33),
        Accent = Color3.fromRGB(184, 187, 38)
    },
    Tokyo = {
        Primary = Color3.fromRGB(122, 162, 247),
        Secondary = Color3.fromRGB(26, 27, 38),
        Tertiary = Color3.fromRGB(36, 40, 59),
        Text = Color3.fromRGB(192, 202, 245),
        TextSecondary = Color3.fromRGB(86, 95, 137),
        Dark = Color3.fromRGB(22, 22, 30),
        Accent = Color3.fromRGB(187, 154, 247)
    },
    Rose = {
        Primary = Color3.fromRGB(235, 111, 146),
        Secondary = Color3.fromRGB(35, 33, 54),
        Tertiary = Color3.fromRGB(49, 46, 70),
        Text = Color3.fromRGB(224, 222, 244),
        TextSecondary = Color3.fromRGB(144, 140, 170),
        Dark = Color3.fromRGB(25, 23, 36),
        Accent = Color3.fromRGB(246, 193, 119)
    }
}

local function tween(object, properties, duration, style, direction)
    if not object or not object.Parent then return end
    duration = duration or 0.3
    style = style or Enum.EasingStyle.Quad
    direction = direction or Enum.EasingDirection.Out
    
    local tweenInfo = TweenInfo.new(duration, style, direction)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

function PrestigeUI:Create(title)
    local self = setmetatable({}, PrestigeUI)
    
    self.Theme = table.clone(ThemePresets.Dark)
    self.Connections = {}
    self.Notifications = {}
    self.ToggleKeybind = Enum.KeyCode.RightShift
    self.MinimizedIcon = nil
    self.AllElements = {} -- Track all elements for theme updates
    title = title or "Prestige Hub"
    self.Tabs = {}
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "PrestigeUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.DisplayOrder = 999999
    ScreenGui.IgnoreGuiInset = true
    
    local LoadingFrame = Instance.new("Frame")
    LoadingFrame.Name = "LoadingFrame"
    LoadingFrame.Size = UDim2.new(0, 400, 0, 200)
    LoadingFrame.Position = UDim2.new(0.5, -200, 0.5, -100)
    LoadingFrame.BackgroundColor3 = self.Theme.Dark
    LoadingFrame.BorderSizePixel = 0
    LoadingFrame.Parent = ScreenGui
    
    local LoadingCorner = Instance.new("UICorner")
    LoadingCorner.CornerRadius = UDim.new(0, 15)
    LoadingCorner.Parent = LoadingFrame
    
    local LoadingTitle = Instance.new("TextLabel")
    LoadingTitle.Size = UDim2.new(1, 0, 0, 50)
    LoadingTitle.Position = UDim2.new(0, 0, 0, 40)
    LoadingTitle.BackgroundTransparency = 1
    LoadingTitle.Text = string.upper(title)
    LoadingTitle.TextColor3 = self.Theme.Primary
    LoadingTitle.Font = Enum.Font.GothamBold
    LoadingTitle.TextSize = 28
    LoadingTitle.Parent = LoadingFrame
    
    local LoadingBarBg = Instance.new("Frame")
    LoadingBarBg.Name = "LoadingBarBg"
    LoadingBarBg.Size = UDim2.new(0, 300, 0, 8)
    LoadingBarBg.Position = UDim2.new(0.5, -150, 0, 120)
    LoadingBarBg.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    LoadingBarBg.BorderSizePixel = 0
    LoadingBarBg.Parent = LoadingFrame
    
    local LoadingBarBgCorner = Instance.new("UICorner")
    LoadingBarBgCorner.CornerRadius = UDim.new(0, 4)
    LoadingBarBgCorner.Parent = LoadingBarBg
    
    local LoadingBar = Instance.new("Frame")
    LoadingBar.Name = "LoadingBar"
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.BackgroundColor3 = self.Theme.Primary
    LoadingBar.BorderSizePixel = 0
    LoadingBar.Parent = LoadingBarBg
    
    local LoadingBarCorner = Instance.new("UICorner")
    LoadingBarCorner.CornerRadius = UDim.new(0, 4)
    LoadingBarCorner.Parent = LoadingBar
    
    local LoadingText = Instance.new("TextLabel")
    LoadingText.Size = UDim2.new(1, 0, 0, 30)
    LoadingText.Position = UDim2.new(0, 0, 0, 145)
    LoadingText.BackgroundTransparency = 1
    LoadingText.Text = "Loading... 0%"
    LoadingText.TextColor3 = self.Theme.TextSecondary
    LoadingText.Font = Enum.Font.Gotham
    LoadingText.TextSize = 14
    LoadingText.Parent = LoadingFrame
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 700, 0, 450)
    MainFrame.Position = UDim2.new(0.5, -350, 0.5, -225)
    MainFrame.BackgroundColor3 = self.Theme.Dark
    MainFrame.BorderSizePixel = 0
    MainFrame.Visible = false
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 15)
    MainCorner.Parent = MainFrame
    
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 45)
    TopBar.BackgroundColor3 = self.Theme.Secondary
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    local TopBarCorner = Instance.new("UICorner")
    TopBarCorner.CornerRadius = UDim.new(0, 15)
    TopBarCorner.Parent = TopBar
    
    local TopBarBottom = Instance.new("Frame")
    TopBarBottom.Name = "TopBarBottom"
    TopBarBottom.Size = UDim2.new(1, 0, 0, 15)
    TopBarBottom.Position = UDim2.new(0, 0, 1, -15)
    TopBarBottom.BackgroundColor3 = self.Theme.Secondary
    TopBarBottom.BorderSizePixel = 0
    TopBarBottom.Parent = TopBar
    self.TopBarBottom = TopBarBottom
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(0, 200, 1, 0)
    TitleLabel.Position = UDim2.new(0, 15, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.TextColor3 = self.Theme.Text
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 16
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TopBar
    
    local MinimizeBtn = Instance.new("Frame")
    MinimizeBtn.Name = "MinimizeBtn"
    MinimizeBtn.Size = UDim2.new(0, 35, 0, 35)
    MinimizeBtn.Position = UDim2.new(1, -80, 0.5, -17.5)
    MinimizeBtn.BackgroundColor3 = self.Theme.Primary
    MinimizeBtn.BorderSizePixel = 0
    MinimizeBtn.Parent = TopBar

    local MinimizeText = Instance.new("TextLabel")
    MinimizeText.Size = UDim2.new(1, 0, 1, 0)
    MinimizeText.BackgroundTransparency = 1
    MinimizeText.Text = "_"
    MinimizeText.TextColor3 = self.Theme.Text
    MinimizeText.Font = Enum.Font.GothamBold
    MinimizeText.TextSize = 20
    MinimizeText.Parent = MinimizeBtn
            
    local MinimizeCorner = Instance.new("UICorner")
    MinimizeCorner.CornerRadius = UDim.new(0, 8)
    MinimizeCorner.Parent = MinimizeBtn
    
    local CloseBtn = Instance.new("Frame")
    CloseBtn.Name = "CloseBtn"
    CloseBtn.Size = UDim2.new(0, 35, 0, 35)
    CloseBtn.Position = UDim2.new(1, -40, 0.5, -17.5)
    CloseBtn.BackgroundColor3 = self.Theme.Primary
    CloseBtn.BorderSizePixel = 0
    CloseBtn.Parent = TopBar

    local CloseText = Instance.new("TextLabel")
    CloseText.Size = UDim2.new(1, 0, 1, 0)
    CloseText.BackgroundTransparency = 1
    CloseText.Text = "X"
    CloseText.TextColor3 = self.Theme.Text
    CloseText.Font = Enum.Font.GothamBold
    CloseText.TextSize = 18
    CloseText.Parent = CloseBtn
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 8)
    CloseCorner.Parent = CloseBtn
    
    local Sidebar = Instance.new("ScrollingFrame")  -- Changed from Frame to ScrollingFrame
    Sidebar.Name = "Sidebar"
    Sidebar.Size = UDim2.new(0, 180, 0, 387)
    Sidebar.Position = UDim2.new(0, 8, 0, 53)
    Sidebar.BackgroundColor3 = self.Theme.Secondary
    Sidebar.BorderSizePixel = 0
    Sidebar.ScrollBarThickness = 6  -- NEW
    Sidebar.ScrollBarImageColor3 = self.Theme.Primary  -- NEW
    Sidebar.CanvasSize = UDim2.new(0, 0, 0, 0)  -- NEW
    Sidebar.AutomaticCanvasSize = Enum.AutomaticSize.Y  -- NEW - Auto-expand for tabs
    Sidebar.Parent = MainFrame
    
    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 12)
    SidebarCorner.Parent = Sidebar
    
    local SidebarList = Instance.new("UIListLayout")
    SidebarList.SortOrder = Enum.SortOrder.LayoutOrder  -- CRITICAL FIX: Sort by LayoutOrder!
    SidebarList.Padding = UDim.new(0, 8)
    SidebarList.Parent = Sidebar
    
    local SidebarPadding = Instance.new("UIPadding")
    SidebarPadding.PaddingTop = UDim.new(0, 12)
    SidebarPadding.PaddingLeft = UDim.new(0, 10)
    SidebarPadding.PaddingRight = UDim.new(0, 10)
    SidebarPadding.PaddingBottom = UDim.new(0, 12)
    SidebarPadding.Parent = Sidebar
    
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Size = UDim2.new(0, 496, 0, 387)
    ContentArea.Position = UDim2.new(0, 196, 0, 53)
    ContentArea.BackgroundColor3 = self.Theme.Secondary
    ContentArea.BorderSizePixel = 0
    ContentArea.Parent = MainFrame
    
    local ContentCorner = Instance.new("UICorner")
    ContentCorner.CornerRadius = UDim.new(0, 12)
    ContentCorner.Parent = ContentArea
    
    ScreenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    self.ScreenGui = ScreenGui
    self.MainFrame = MainFrame
    self.TopBar = TopBar
    self.Title = TitleLabel
    self.MinimizeBtn = MinimizeBtn
    self.CloseBtn = CloseBtn
    self.Sidebar = Sidebar
    self.ContentArea = ContentArea
    self.Tabs = {}
    self.TabCounter = 0  -- METHOD 1: Add counter for proper tab ordering
    self.ActiveTab = nil
    
    MinimizeBtn.MouseEnter:Connect(function()
        tween(MinimizeBtn, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
    end)
    MinimizeBtn.MouseLeave:Connect(function()
        tween(MinimizeBtn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        tween(CloseBtn, {BackgroundColor3 = self.Theme.Accent}, 0.2)
    end)
    CloseBtn.MouseLeave:Connect(function()
        tween(CloseBtn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    self.Connections.LoadingTask = task.spawn(function()
        for i = 0, 100 do
            task.wait(0.015)
            LoadingBar:TweenSize(UDim2.new(i/100, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.015, true)
            LoadingText.Text = "Loading... " .. i .. "%"
        end
        task.wait(0.3)
        
        -- Fade out loading frame
        tween(LoadingFrame, {BackgroundTransparency = 1}, 0.3)
        task.wait(0.3)
        
        LoadingFrame:Destroy()
        
        MainFrame.Visible = true
        MainFrame.BackgroundTransparency = 1
        
        -- Simple fade in
        tween(MainFrame, {BackgroundTransparency = 0}, 0.5, Enum.EasingStyle.Quad)
    end)
    
    local dragging = false
    local dragInput, mousePos, framePos
    self.Connections.TopBarInputBegan = TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    self.Connections.TopBarInputChanged = TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    self.Connections.UserInputChanged = UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            MainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
    
    local minimized = false
    self.Connections.MinimizeClick = MinimizeBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            minimized = not minimized
            if minimized then
                tween(MainFrame, {Size = UDim2.new(0, 700, 0, 45)}, 0.4, Enum.EasingStyle.Quad)
                MinimizeText.Text = "□"
                Sidebar.Visible = false
                ContentArea.Visible = false
            else
                tween(MainFrame, {Size = UDim2.new(0, 700, 0, 450)}, 0.4, Enum.EasingStyle.Quad)
                MinimizeText.Text = "_"
                Sidebar.Visible = true
                ContentArea.Visible = true
            end
        end
    end)

    self.Connections.KeybindToggle = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == self.ToggleKeybind then
            if MainFrame.Visible then
                self:MinimizeToCorner()
            else
                self:RestoreFromCorner()
            end
        end
    end)

    self.Connections.CloseClick = CloseBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self:Close()
        end
    end)

    return self
end

function PrestigeUI:Close()
    if self.Closing then return end
    self.Closing = true
    
    if self.CloseBtn and self.CloseBtn.Parent then
        local closeTween = tween(self.CloseBtn, {BackgroundColor3 = Color3.fromRGB(200, 50, 50)}, 0.1)
        if closeTween then closeTween.Completed:Wait() end
    end
    
    -- Simple fade out - just the main frame
    if self.MainFrame and self.MainFrame.Parent then
        local mainTween = tween(self.MainFrame, {
            BackgroundTransparency = 1
        }, 0.3, Enum.EasingStyle.Quad)
        
        -- WAIT for animation to complete before destroying
        if mainTween then 
            mainTween.Completed:Wait() 
        else
            task.wait(0.3)
        end
    else
        task.wait(0.3)
    end
    
    for name, conn in pairs(self.Connections or {}) do
        if typeof(conn) == "RBXScriptConnection" then
            pcall(function()
                conn:Disconnect()
            end)
        end
    end
    self.Connections = {}
    
    if self.ScreenGui then
        pcall(function()
            self.ScreenGui:Destroy()
        end)
    end
    
    table.clear(self)
    _G.PrestigeUI = nil
end

function PrestigeUI:AddTab(tabName)
    local Container = Instance.new("Frame")
    Container.Name = tabName .. "TabContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.ClipsDescendants = true
    -- METHOD 2: Set LayoutOrder BEFORE parenting to ensure proper ordering
    self.TabCounter = self.TabCounter + 1
    Container.LayoutOrder = self.TabCounter
    Container.Parent = self.Sidebar
    
    local TabBtn = Instance.new("Frame")
    TabBtn.Name = tabName .. "Tab"
    TabBtn.Size = UDim2.new(1, 0, 1, 0)
    TabBtn.BackgroundColor3 = self.Theme.Tertiary
    TabBtn.BorderSizePixel = 0
    TabBtn.Parent = Container
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 10)
    TabCorner.Parent = TabBtn
    
    local TabText = Instance.new("TextLabel")
    TabText.Size = UDim2.new(1, 0, 1, 0)
    TabText.BackgroundTransparency = 1
    TabText.Text = tabName
    TabText.TextColor3 = self.Theme.Text
    TabText.Font = Enum.Font.GothamBold
    TabText.TextSize = 14
    TabText.Parent = TabBtn
    
    local Content = Instance.new("ScrollingFrame")
    Content.Name = tabName .. "Content"
    Content.Size = UDim2.new(1, 0, 1, 0)
    Content.BackgroundTransparency = 1
    Content.BorderSizePixel = 0
    Content.ScrollBarThickness = 6
    Content.ScrollBarImageColor3 = self.Theme.Primary
    Content.Visible = false
    Content.CanvasSize = UDim2.new(0, 0, 0, 0)
    Content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    Content.Parent = self.ContentArea
    
    local ContentList = Instance.new("UIListLayout")
    ContentList.Padding = UDim.new(0, 10)
    ContentList.Parent = Content
    
    local ContentPadding = Instance.new("UIPadding")
    ContentPadding.PaddingTop = UDim.new(0, 15)
    ContentPadding.PaddingLeft = UDim.new(0, 15)
    ContentPadding.PaddingRight = UDim.new(0, 15)
    ContentPadding.PaddingBottom = UDim.new(0, 15)
    ContentPadding.Parent = Content

    if self.ActiveTab == nil then
        self.ActiveTab = tabName
        TabBtn.BackgroundColor3 = self.Theme.Primary
        Content.Visible = true
    end
    
    TabBtn.MouseEnter:Connect(function()
        if self.ActiveTab ~= tabName then
            tween(TabBtn, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
        end
    end)
    TabBtn.MouseLeave:Connect(function()
        if self.ActiveTab ~= tabName then
            tween(TabBtn, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        end
    end)
    
    TabBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self.ActiveTab = tabName
            -- FIX: Use ipairs to maintain order
            for i, tab in ipairs(self.Tabs) do
                if tab.Name == tabName then
                    tween(tab.Button, {BackgroundColor3 = self.Theme.Primary}, 0.3)
                    tab.Content.Visible = true
                else
                    tween(tab.Button, {BackgroundColor3 = self.Theme.Tertiary}, 0.3)
                    tab.Content.Visible = false
                end
            end
        end
    end)

    -- FIX: Only use array, no dictionary
    local tabData = {Button = TabBtn, Content = Content, Name = tabName, Container = Container}
    table.insert(self.Tabs, tabData)
    
    table.insert(self.AllElements, {Type = "Tab", Btn = TabBtn, Text = TabText})
    return Content
end

function PrestigeUI:AddButton(parent, text, callback)
    local Container = Instance.new("Frame")
    Container.Name = text .. "Container"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.ClipsDescendants = false
    Container.Parent = parent
    
    local Btn = Instance.new("Frame")
    Btn.Name = text .. "Button"
    Btn.Size = UDim2.new(1, 0, 1, 0)
    Btn.Position = UDim2.new(0, 0, 0, 0)
    Btn.BackgroundColor3 = self.Theme.Primary
    Btn.BorderSizePixel = 0
    Btn.Parent = Container
    
    local BtnCorner = Instance.new("UICorner")
    BtnCorner.CornerRadius = UDim.new(0, 8)
    BtnCorner.Parent = Btn
    
    local BtnText = Instance.new("TextLabel")
    BtnText.Name = "Text"
    BtnText.Size = UDim2.new(1, 0, 1, 0)
    BtnText.BackgroundTransparency = 1
    BtnText.Text = text
    BtnText.TextColor3 = self.Theme.Text
    BtnText.Font = Enum.Font.GothamBold
    BtnText.TextSize = 14
    BtnText.Parent = Btn

    Btn.MouseEnter:Connect(function()
        tween(Btn, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
        tween(Btn, {Size = UDim2.new(1, 5, 1, 0)}, 0.2, Enum.EasingStyle.Back)
    end)
    Btn.MouseLeave:Connect(function()
        tween(Btn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        tween(Btn, {Size = UDim2.new(1, 0, 1, 0)}, 0.2)
    end)
    
    Btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            tween(Btn, {Size = UDim2.new(1, -5, 0.9, 0)}, 0.1)
            task.wait(0.1)
            if callback then callback() end
        end
    end)
    
    Btn.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            tween(Btn, {Size = UDim2.new(1, 5, 1, 0)}, 0.2, Enum.EasingStyle.Back)
        end
    end)
    
    table.insert(self.AllElements, {Type = "Button", Btn = Btn, Text = BtnText, Label = text})
    return Container
end

function PrestigeUI:AddLabel(parent, text, textSize)
    textSize = textSize or 16
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, 0, 0, textSize + 8)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = textSize
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = parent
    table.insert(self.AllElements, {Type = "Label", Lbl = Label, Text = Label})
    return Label
end

function PrestigeUI:AddParagraph(parent, title, content)
    local Container = Instance.new("Frame")
    Container.Name = "Paragraph"
    Container.Size = UDim2.new(1, 0, 0, 60)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Padding = Instance.new("UIPadding")
    Padding.PaddingTop = UDim.new(0, 10)
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.PaddingBottom = UDim.new(0, 10)
    Padding.Parent = Container
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 18)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.TextColor3 = self.Theme.Primary
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Container
    
    local ContentLabel = Instance.new("TextLabel")
    ContentLabel.Name = "Content"
    ContentLabel.Size = UDim2.new(1, 0, 0, 32)
    ContentLabel.Position = UDim2.new(0, 0, 0, 18)
    ContentLabel.BackgroundTransparency = 1
    ContentLabel.Text = content
    ContentLabel.TextColor3 = self.Theme.TextSecondary
    ContentLabel.Font = Enum.Font.Gotham
    ContentLabel.TextSize = 12
    ContentLabel.TextXAlignment = Enum.TextXAlignment.Left
    ContentLabel.TextWrapped = true
    ContentLabel.Parent = Container
    table.insert(self.AllElements, {Type = "Para", Bg = Container, Title = Title, Content = ContentLabel})
    return Container
end

function PrestigeUI:AddTextBox(parent, placeholder, callback)
    local Container = Instance.new("Frame")
    Container.Name = "TextBoxContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local TextBox = Instance.new("TextBox")
    TextBox.Name = "TextBox"
    TextBox.Size = UDim2.new(1, 0, 1, 0)
    TextBox.BackgroundTransparency = 1
    TextBox.BorderSizePixel = 0
    TextBox.Text = ""
    TextBox.PlaceholderText = placeholder or "Enter text..."
    TextBox.TextColor3 = self.Theme.Text
    TextBox.PlaceholderColor3 = self.Theme.TextSecondary
    TextBox.Font = Enum.Font.Gotham
    TextBox.TextSize = 14
    TextBox.Parent = Container
    
    local Padding = Instance.new("UIPadding")
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.Parent = TextBox
    
    TextBox.Focused:Connect(function()
        tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
    end)
    TextBox.FocusLost:Connect(function(enterPressed)
        tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        if enterPressed and callback then
            callback(TextBox.Text)
        end
    end)
    
    table.insert(self.AllElements, {Type = "TextBox", Bg = Container, Box = TextBox})
    return TextBox
end

function PrestigeUI:AddToggle(parent, text, callback)
    local Container = Instance.new("Frame")
    Container.Name = "ToggleContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, -70, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ToggleBg = Instance.new("Frame")
    ToggleBg.Name = "ToggleBg"
    ToggleBg.Size = UDim2.new(0, 50, 0, 25)
    ToggleBg.Position = UDim2.new(1, -50, 0.5, -12.5)
    ToggleBg.BackgroundColor3 = self.Theme.Tertiary
    ToggleBg.BorderSizePixel = 0
    ToggleBg.Parent = Container
    
    local ToggleBgCorner = Instance.new("UICorner")
    ToggleBgCorner.CornerRadius = UDim.new(0, 12)
    ToggleBgCorner.Parent = ToggleBg
    
    local ToggleButton = Instance.new("Frame")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Size = UDim2.new(0, 21, 0, 21)
    ToggleButton.Position = UDim2.new(0, 2, 0.5, -10.5)
    ToggleButton.BackgroundColor3 = self.Theme.Primary
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Parent = ToggleBg
    
    local ToggleButtonCorner = Instance.new("UICorner")
    ToggleButtonCorner.CornerRadius = UDim.new(0, 10)
    ToggleButtonCorner.Parent = ToggleButton
    
    local toggled = false
    
    ToggleBg.MouseEnter:Connect(function()
        tween(ToggleButton, {Size = UDim2.new(0, 23, 0, 23)}, 0.2, Enum.EasingStyle.Back)
    end)
    ToggleBg.MouseLeave:Connect(function()
        tween(ToggleButton, {Size = UDim2.new(0, 21, 0, 21)}, 0.2)
    end)
    
    ToggleBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            if toggled then
                tween(ToggleButton, {Position = UDim2.new(0, 27, 0.5, -10.5)}, 0.3, Enum.EasingStyle.Back)
                tween(ToggleBg, {BackgroundColor3 = self.Theme.Primary}, 0.3)
            else
                tween(ToggleButton, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.3, Enum.EasingStyle.Back)
                tween(ToggleBg, {BackgroundColor3 = self.Theme.Tertiary}, 0.3)
            end
            if callback then
                callback(toggled)
            end
        end
    end)
    
    table.insert(self.AllElements, {Type = "Toggle", Bg = ToggleBg, Btn = ToggleButton, Label = Label})
    return {Container = Container, Toggle = ToggleButton, GetState = function() return toggled end}
end

-- Patch dropdown opening to always update colors of list and options
local oldAddDropdown = PrestigeUI.AddDropdown
function PrestigeUI:AddDropdown(parent, placeholder, options, callback)
    local Container = oldAddDropdown(self, parent, placeholder, options, callback)
    -- Patch dropdown so it always recolors on open or theme switch
    local function updateDropdownColors()
        if type(Container) == "table" and Container.List then
            for _, c in ipairs(Container.List:GetChildren()) do
                if c:IsA("Frame") then
                    c.BackgroundColor3 = self.Theme.Tertiary
                    local lbl = c:FindFirstChildWhichIsA("TextLabel")
                    if lbl then lbl.TextColor3 = self.Theme.Text end
                end
            end
        end
        if type(Container) == "table" and Container.Bg then
            Container.Bg.BackgroundColor3 = self.Theme.Tertiary
        end
        if type(Container) == "table" and Container.Btn then
            Container.Btn.BackgroundColor3 = self.Theme.Tertiary
        end
        if type(Container) == "table" and Container.List and Container.List.Visible then
            -- If open, force visible update of each option
            for _, c in ipairs(Container.List:GetChildren()) do
                if c:IsA("Frame") and c:IsA("GuiObject") then c.BackgroundTransparency = 0 end
            end
        end
    end
    -- Connections for live recoloring
    if type(Container) == "table" and Container.List then
        Container.List:GetPropertyChangedSignal("Visible"):Connect(updateDropdownColors)
    end
    updateDropdownColors()
    return Container
end

function PrestigeUI:AddSlider(parent, min, max, default, callback)
    local Container = Instance.new("Frame")
    Container.Name = "SliderContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, 0, 0, 15)
    Label.BackgroundTransparency = 1
    Label.Text = "Value: " .. (default or min)
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 12
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local SliderBg = Instance.new("Frame")
    SliderBg.Name = "SliderBg"
    SliderBg.Size = UDim2.new(1, 0, 0, 6)
    SliderBg.Position = UDim2.new(0, 0, 0, 20)
    SliderBg.BackgroundColor3 = self.Theme.Tertiary
    SliderBg.BorderSizePixel = 0
    SliderBg.Parent = Container
    
    local SliderBgCorner = Instance.new("UICorner")
    SliderBgCorner.CornerRadius = UDim.new(0, 3)
    SliderBgCorner.Parent = SliderBg
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "Fill"
    SliderFill.Size = UDim2.new(0, 0, 1, 0)
    SliderFill.BackgroundColor3 = self.Theme.Primary
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBg
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(0, 3)
    SliderFillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("Frame")
    SliderButton.Name = "SliderButton"
    SliderButton.Size = UDim2.new(0, 14, 0, 14)
    SliderButton.Position = UDim2.new(0, 0, 0.5, -7)
    SliderButton.BackgroundColor3 = self.Theme.Primary
    SliderButton.BorderSizePixel = 0
    SliderButton.Parent = SliderBg
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 7)
    ButtonCorner.Parent = SliderButton
    
    local dragging = false
    local value = default or min
    
    local percentage = (value - min) / (max - min)
    SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
    SliderButton.Position = UDim2.new(percentage, -7, 0.5, -7)
    
    SliderButton.MouseEnter:Connect(function()
        tween(SliderButton, {Size = UDim2.new(0, 18, 0, 18)}, 0.2, Enum.EasingStyle.Back)
        tween(SliderButton, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
    end)
    SliderButton.MouseLeave:Connect(function()
        if not dragging then
            tween(SliderButton, {Size = UDim2.new(0, 14, 0, 14)}, 0.2)
            tween(SliderButton, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        end
    end)
    
    local function updateSlider(input)
        local relativeX = math.clamp(input.Position.X - SliderBg.AbsolutePosition.X, 0, SliderBg.AbsoluteSize.X)
        local percentage = relativeX / SliderBg.AbsoluteSize.X
        value = math.floor(min + (max - min) * percentage)
        value = math.clamp(value, min, max)
        
        tween(SliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
        tween(SliderButton, {Position = UDim2.new(percentage, -7, 0.5, -7)}, 0.1)
        Label.Text = "Value: " .. value
        
        if callback then
            callback(value)
        end
    end
    
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            tween(SliderButton, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            tween(SliderButton, {Size = UDim2.new(0, 14, 0, 14)}, 0.2)
            tween(SliderButton, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        end
    end)
    
    SliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateSlider(input)
        end
    end)
    
    table.insert(self.AllElements, {Type = "Slider", Bg = SliderBg, Btn = SliderButton, Label = Label})
    return {Container = Container, GetValue = function() return value end}
end

function PrestigeUI:Notify(options)
    options = options or {}
    local title = options.Title or "Notification"
    local message = options.Message or ""
    local duration = options.Duration or 3
    local type = options.Type or "Info"
    
    local typeColors = {
        Info = Color3.fromRGB(52, 152, 219),
        Success = Color3.fromRGB(46, 213, 115),
        Warning = Color3.fromRGB(255, 195, 18),
        Error = Color3.fromRGB(255, 71, 87)
    }
    
    local NotifContainer = Instance.new("Frame")
    NotifContainer.Name = "Notification"
    NotifContainer.Size = UDim2.new(0, 340, 0, 100)
    NotifContainer.Position = UDim2.new(1, 360, 1, -120 - (#self.Notifications * 110))
    NotifContainer.BackgroundColor3 = self.Theme.Secondary
    NotifContainer.BorderSizePixel = 0
    NotifContainer.Parent = self.ScreenGui
    
    local NotifCorner = Instance.new("UICorner")
    NotifCorner.CornerRadius = UDim.new(0, 12)
    NotifCorner.Parent = NotifContainer
    
    local NotifAccent = Instance.new("Frame")
    NotifAccent.Name = "Accent"
    NotifAccent.Size = UDim2.new(0, 5, 1, 0)
    NotifAccent.BackgroundColor3 = typeColors[type] or typeColors.Info
    NotifAccent.BorderSizePixel = 0
    NotifAccent.Parent = NotifContainer
    
    local AccentCorner = Instance.new("UICorner")
    AccentCorner.CornerRadius = UDim.new(0, 12)
    AccentCorner.Parent = NotifAccent
    
    local NotifTitle = Instance.new("TextLabel")
    NotifTitle.Name = "Title"
    NotifTitle.Size = UDim2.new(1, -60, 0, 30)
    NotifTitle.Position = UDim2.new(0, 20, 0, 8)
    NotifTitle.BackgroundTransparency = 1
    NotifTitle.Text = title
    NotifTitle.TextColor3 = self.Theme.Primary
    NotifTitle.Font = Enum.Font.GothamBold
    NotifTitle.TextSize = 18
    NotifTitle.TextXAlignment = Enum.TextXAlignment.Left
    NotifTitle.TextYAlignment = Enum.TextYAlignment.Center
    NotifTitle.Parent = NotifContainer
    
    local NotifMessage = Instance.new("TextLabel")
    NotifMessage.Name = "Message"
    NotifMessage.Size = UDim2.new(1, -60, 0, 50)
    NotifMessage.Position = UDim2.new(0, 20, 0, 40)
    NotifMessage.BackgroundTransparency = 1
    NotifMessage.Text = message
    NotifMessage.TextColor3 = self.Theme.Text
    NotifMessage.Font = Enum.Font.Gotham
    NotifMessage.TextSize = 14
    NotifMessage.TextXAlignment = Enum.TextXAlignment.Left
    NotifMessage.TextYAlignment = Enum.TextYAlignment.Top
    NotifMessage.TextWrapped = true
    NotifMessage.Parent = NotifContainer
    
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Name = "Close"
    CloseBtn.Size = UDim2.new(0, 25, 0, 25)
    CloseBtn.Position = UDim2.new(1, -35, 0, 8)
    CloseBtn.BackgroundTransparency = 1
    CloseBtn.Text = "×"
    CloseBtn.TextColor3 = self.Theme.TextSecondary
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.TextSize = 24
    CloseBtn.Parent = NotifContainer
    
    table.insert(self.Notifications, NotifContainer)
    
    tween(NotifContainer, {Position = UDim2.new(1, -350, 1, -120 - (#self.Notifications * 110))}, 0.5, Enum.EasingStyle.Back)
    
    local function removeNotif()
        for i, notif in ipairs(self.Notifications) do
            if notif == NotifContainer then
                table.remove(self.Notifications, i)
                break
            end
        end
        
        local slideTween = tween(NotifContainer, {Position = UDim2.new(1, 360, NotifContainer.Position.Y.Scale, NotifContainer.Position.Y.Offset)}, 0.3, Enum.EasingStyle.Quad)
        if slideTween then slideTween.Completed:Wait() end
        NotifContainer:Destroy()
        
        for i, notif in ipairs(self.Notifications) do
            tween(notif, {Position = UDim2.new(1, -350, 1, -120 - (i * 110))}, 0.3, Enum.EasingStyle.Quad)
        end
    end
    
    CloseBtn.MouseButton1Click:Connect(removeNotif)
    task.delay(duration, removeNotif)
end

-- Patch ApplyTheme so it guarantees ALL text/frames for dropdowns and labels use the right color
local oldApplyTheme = PrestigeUI.ApplyTheme
function PrestigeUI:ApplyTheme()
    oldApplyTheme(self)
    for _, elem in ipairs(self.AllElements or {}) do
        if elem.Type == "Dropdown" then
            if elem.List then
                for _, c in ipairs(elem.List:GetChildren()) do
                    if c:IsA("Frame") then
                        c.BackgroundColor3 = self.Theme.Tertiary
                        local lbl = c:FindFirstChildWhichIsA("TextLabel")
                        if lbl then lbl.TextColor3 = self.Theme.Text end
                    end
                end
            end
            if elem.Bg then elem.Bg.BackgroundColor3 = self.Theme.Tertiary end
            if elem.Btn then elem.Btn.BackgroundColor3 = self.Theme.Tertiary end
        elseif elem.Type == "Label" then
            if elem.Lbl then elem.Lbl.TextColor3 = self.Theme.Text end
        elseif elem.Type == "Para" then
            if elem.Bg then elem.Bg.BackgroundColor3 = self.Theme.Tertiary end
            if elem.Title then elem.Title.TextColor3 = self.Theme.Text end
            if elem.Content then elem.Content.TextColor3 = self.Theme.Text end
        end
    end
end

-- Patch AddLabel so it always uses theme text
local oldAddLabel = PrestigeUI.AddLabel
function PrestigeUI:AddLabel(parent, text, textSize)
    local lbl = oldAddLabel(self, parent, text, textSize)
    if typeof(lbl) == "Instance" and lbl:IsA("TextLabel") then
        lbl.TextColor3 = self.Theme.Text
    end
    return lbl
end
-- Patch AddParagraph similarly
local oldAddParagraph = PrestigeUI.AddParagraph
function PrestigeUI:AddParagraph(parent, title, content)
    local container = oldAddParagraph(self, parent, title, content)
    if typeof(container) == "Instance" then
        for _, c in ipairs(container:GetChildren()) do
            if c:IsA("TextLabel") then
                c.TextColor3 = self.Theme.Text
            end
            if c:IsA("Frame") then
                c.BackgroundColor3 = self.Theme.Tertiary
            end
        end
    end
    return container
end

function PrestigeUI:AddSearchBar(parent)
    local Container = Instance.new("Frame")
    Container.Name = "SearchContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.LayoutOrder = -999
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local SearchIcon = Instance.new("TextLabel")
    SearchIcon.Size = UDim2.new(0, 30, 1, 0)
    SearchIcon.BackgroundTransparency = 1
    SearchIcon.Text = "🔍"
    SearchIcon.TextColor3 = self.Theme.TextSecondary
    SearchIcon.Font = Enum.Font.Gotham
    SearchIcon.TextSize = 16
    SearchIcon.Parent = Container
    
    local SearchBox = Instance.new("TextBox")
    SearchBox.Name = "SearchBox"
    SearchBox.Size = UDim2.new(1, -40, 1, 0)
    SearchBox.Position = UDim2.new(0, 35, 0, 0)
    SearchBox.BackgroundTransparency = 1
    SearchBox.Text = ""
    SearchBox.PlaceholderText = "Search features..."
    SearchBox.TextColor3 = self.Theme.Text
    SearchBox.PlaceholderColor3 = self.Theme.TextSecondary
    SearchBox.Font = Enum.Font.Gotham
    SearchBox.TextSize = 14
    SearchBox.TextXAlignment = Enum.TextXAlignment.Left
    SearchBox.ClearTextOnFocus = false
    SearchBox.Parent = Container
    
    SearchBox.Focused:Connect(function()
        tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
        tween(SearchIcon, {TextColor3 = self.Theme.Primary}, 0.2)
    end)
    
    SearchBox.FocusLost:Connect(function()
        tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        tween(SearchIcon, {TextColor3 = self.Theme.TextSecondary}, 0.2)
    end)
    
    SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
        local query = SearchBox.Text:lower()
        
        for i, tab in ipairs(self.Tabs) do
            local name = tab.Name
            local shouldShow = false
            
            if query == "" then
                shouldShow = true
            else
                if name:lower():find(query, 1, true) then
                    shouldShow = true
                else
                    local function searchChildren(searchParent)
                        for _, child in ipairs(searchParent:GetChildren()) do
                            if child:IsA("TextLabel") then
                                if child.Text:lower():find(query, 1, true) then
                                    return true
                                end
                            elseif child:IsA("TextButton") then
                                if child.Text:lower():find(query, 1, true) then
                                    return true
                                end
                            elseif child:IsA("TextBox") then
                                if child.Text:lower():find(query, 1, true) or child.PlaceholderText:lower():find(query, 1, true) then
                                    return true
                                end
                            end
                            
                            if searchChildren(child) then
                                return true
                            end
                        end
                        return false
                    end
                    
                    if searchChildren(tab.Content) then
                        shouldShow = true
                    end
                end
            end
            
            tab.Container.Visible = shouldShow
        end
    end)
    
    table.insert(self.AllElements, {Type = "SearchBar", Bg = Container, Icon = SearchIcon, Box = SearchBox})
    return SearchBox
end

function PrestigeUI:MinimizeToCorner()
    if self.MinimizedIcon then return end
    
    -- Simple fade out the main frame
    if self.MainFrame and self.MainFrame.Parent then
        local mainFade = tween(self.MainFrame, {
            BackgroundTransparency = 1
        }, 0.3, Enum.EasingStyle.Quad)
        
        -- WAIT for the animation to complete
        if mainFade then
            mainFade.Completed:Wait()
        else
            task.wait(0.3)
        end
        
        self.MainFrame.Visible = false
        -- Reset transparency for when we restore
        self.MainFrame.BackgroundTransparency = 0
    else
        return
    end
    
    local Icon = Instance.new("Frame")
    Icon.Name = "MinimizedIcon"
    Icon.Size = UDim2.new(0, 60, 0, 60)
    Icon.Position = UDim2.new(1, -80, 1, -80)
    Icon.BackgroundColor3 = self.Theme.Primary
    Icon.BorderSizePixel = 0
    Icon.Parent = self.ScreenGui
    
    local IconCorner = Instance.new("UICorner")
    IconCorner.CornerRadius = UDim.new(0, 15)
    IconCorner.Parent = Icon
    
    local IconText = Instance.new("TextLabel")
    IconText.Size = UDim2.new(1, 0, 1, 0)
    IconText.BackgroundTransparency = 1
    IconText.Text = "P"
    IconText.TextColor3 = self.Theme.Text
    IconText.Font = Enum.Font.GothamBold
    IconText.TextSize = 28
    IconText.Parent = Icon
    
    local dragging = false
    local dragInput, mousePos, framePos
    
    Icon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = Icon.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Icon.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            Icon.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
    
    Icon.MouseEnter:Connect(function()
        tween(Icon, {Size = UDim2.new(0, 70, 0, 70), BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2, Enum.EasingStyle.Quad)
    end)
    
    Icon.MouseLeave:Connect(function()
        tween(Icon, {Size = UDim2.new(0, 60, 0, 60), BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    Icon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self:RestoreFromCorner()
        end
    end)
    
    self.MinimizedIcon = Icon
    
    -- Fade in the icon
    Icon.BackgroundTransparency = 1
    IconText.TextTransparency = 1
    
    tween(Icon, {BackgroundTransparency = 0}, 0.4, Enum.EasingStyle.Quad)
    tween(IconText, {TextTransparency = 0}, 0.4)
end

-- 3. UPDATE THE RestoreFromCorner FUNCTION (around line 1120)
function PrestigeUI:RestoreFromCorner()
    if self.MinimizedIcon and self.MinimizedIcon.Parent then
        -- Fade out icon
        local iconFade = tween(self.MinimizedIcon, {BackgroundTransparency = 1}, 0.3, Enum.EasingStyle.Quad)
        local textLabel = self.MinimizedIcon:FindFirstChildOfClass("TextLabel")
        if textLabel then
            tween(textLabel, {TextTransparency = 1}, 0.3)
        end
        
        -- WAIT for the animation to complete
        if iconFade then
            iconFade.Completed:Wait()
        else
            task.wait(0.3)
        end
        
        self.MinimizedIcon:Destroy()
        self.MinimizedIcon = nil
    end
    
    -- Fade in main frame
    if self.MainFrame and self.MainFrame.Parent then
        self.MainFrame.Visible = true
        self.MainFrame.BackgroundTransparency = 1
        
        tween(self.MainFrame, {BackgroundTransparency = 0}, 0.4, Enum.EasingStyle.Quad)
    end
end

-- ========================================
-- NEW FEATURES TO ADD TO PRESTIGE UI
-- ========================================
-- Copy these functions and paste them BEFORE the final "return PrestigeUI" line

-- Section/Divider
function PrestigeUI:AddDivider(parent, text)
    local Container = Instance.new("Frame")
    Container.Name = "Divider"
    Container.Size = UDim2.new(1, 0, 0, text and 35 or 15)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    if text and text ~= "" then
        -- Text label at the top
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.Position = UDim2.new(0, 0, 0, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = self.Theme.TextSecondary
        Label.Font = Enum.Font.GothamBold
        Label.TextSize = 12
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Container
        
        -- Line BELOW the text
        local Line = Instance.new("Frame")
        Line.Size = UDim2.new(1, 0, 0, 2)
        Line.Position = UDim2.new(0, 0, 0, 25)
        Line.BackgroundColor3 = self.Theme.Tertiary
        Line.BorderSizePixel = 0
        Line.Parent = Container
    else
        -- Just a line, centered
        local Line = Instance.new("Frame")
        Line.Size = UDim2.new(1, 0, 0, 2)
        Line.Position = UDim2.new(0, 0, 0.5, -1)
        Line.BackgroundColor3 = self.Theme.Tertiary
        Line.BorderSizePixel = 0
        Line.Parent = Container
    end
    
    return Container
end

-- Keybind Selector - FIXED: Better error handling
function PrestigeUI:AddKeybind(parent, text, default, callback)
    if not parent or not self.Theme then 
        warn("AddKeybind: Invalid parent or theme not initialized")
        return nil
    end
    
    local Container = Instance.new("Frame")
    Container.Name = "KeybindContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -120, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text or "Keybind"
    Label.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local KeybindBtn = Instance.new("Frame")
    KeybindBtn.Size = UDim2.new(0, 110, 0, 30)
    KeybindBtn.Position = UDim2.new(1, -110, 0.5, -15)
    KeybindBtn.BackgroundColor3 = self.Theme.Tertiary or Color3.fromRGB(28, 28, 32)
    KeybindBtn.BorderSizePixel = 0
    KeybindBtn.Parent = Container
    
    local BtnCorner = Instance.new("UICorner")
    BtnCorner.CornerRadius = UDim.new(0, 8)
    BtnCorner.Parent = KeybindBtn
    
    local currentKey = default or Enum.KeyCode.Unknown
    local KeyText = Instance.new("TextLabel")
    KeyText.Size = UDim2.new(1, 0, 1, 0)
    KeyText.BackgroundTransparency = 1
    KeyText.Text = currentKey.Name
    KeyText.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    KeyText.Font = Enum.Font.Gotham
    KeyText.TextSize = 13
    KeyText.Parent = KeybindBtn
    
    local listening = false
    
    KeybindBtn.MouseEnter:Connect(function()
        tween(KeybindBtn, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
    end)
    KeybindBtn.MouseLeave:Connect(function()
        if not listening then
            tween(KeybindBtn, {BackgroundColor3 = self.Theme.Tertiary or Color3.fromRGB(28, 28, 32)}, 0.2)
        end
    end)
    
    KeybindBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not listening then
            listening = true
            KeyText.Text = "..."
            tween(KeybindBtn, {BackgroundColor3 = self.Theme.Primary or Color3.fromRGB(0, 180, 255)}, 0.2)
        end
    end)
    
    local connection
    connection = UserInputService.InputBegan:Connect(function(input)
        if listening and input.UserInputType == Enum.UserInputType.Keyboard then
            currentKey = input.KeyCode
            KeyText.Text = currentKey.Name
            listening = false
            tween(KeybindBtn, {BackgroundColor3 = self.Theme.Tertiary or Color3.fromRGB(28, 28, 32)}, 0.2)
            if callback then 
                pcall(function() callback(currentKey) end)
            end
        end
    end)
    
    table.insert(self.Connections, connection)
    return {Container = Container, GetKey = function() return currentKey end}
end

-- Color Picker - FIXED: Better error handling
function PrestigeUI:AddColorPicker(parent, text, default, callback)
    if not parent or not self.Theme then 
        warn("AddColorPicker: Invalid parent or theme not initialized")
        return nil
    end
    
    local Container = Instance.new("Frame")
    Container.Name = "ColorPickerContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -50, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text or "Color"
    Label.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local currentColor = default or Color3.fromRGB(0, 180, 255)
    
    local ColorDisplay = Instance.new("Frame")
    ColorDisplay.Size = UDim2.new(0, 40, 0, 30)
    ColorDisplay.Position = UDim2.new(1, -40, 0.5, -15)
    ColorDisplay.BackgroundColor3 = currentColor
    ColorDisplay.BorderSizePixel = 0
    ColorDisplay.Parent = Container
    
    local DisplayCorner = Instance.new("UICorner")
    DisplayCorner.CornerRadius = UDim.new(0, 8)
    DisplayCorner.Parent = ColorDisplay
    
    ColorDisplay.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            pcall(function()
                self:OpenColorPicker(currentColor, function(newColor)
                    currentColor = newColor
                    ColorDisplay.BackgroundColor3 = newColor
                    if callback then 
                        pcall(function() callback(newColor) end)
                    end
                end)
            end)
        end
    end)
    
    ColorDisplay.MouseEnter:Connect(function()
        tween(ColorDisplay, {Size = UDim2.new(0, 45, 0, 35)}, 0.2, Enum.EasingStyle.Back)
    end)
    ColorDisplay.MouseLeave:Connect(function()
        tween(ColorDisplay, {Size = UDim2.new(0, 40, 0, 30)}, 0.2)
    end)
    
    return {Container = Container, GetColor = function() return currentColor end}
end

-- Color Picker Window - FIXED: Better error handling and cleanup
function PrestigeUI:OpenColorPicker(defaultColor, callback)
    if not self.ScreenGui or not self.Theme then 
        warn("OpenColorPicker: ScreenGui or Theme not initialized")
        return
    end
    
    local PickerFrame = Instance.new("Frame")
    PickerFrame.Name = "ColorPickerFrame"
    PickerFrame.Size = UDim2.new(0, 300, 0, 350)
    PickerFrame.Position = UDim2.new(0.5, -150, 0.5, -175)
    PickerFrame.BackgroundColor3 = self.Theme.Secondary or Color3.fromRGB(22, 22, 25)
    PickerFrame.BorderSizePixel = 0
    PickerFrame.ZIndex = 1000
    PickerFrame.Parent = self.ScreenGui
    
    local PickerCorner = Instance.new("UICorner")
    PickerCorner.CornerRadius = UDim.new(0, 12)
    PickerCorner.Parent = PickerFrame
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 40)
    Title.BackgroundTransparency = 1
    Title.Text = "Color Picker"
    Title.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 16
    Title.Parent = PickerFrame
    
    local r, g, b = math.floor(defaultColor.R * 255), math.floor(defaultColor.G * 255), math.floor(defaultColor.B * 255)
    
    -- RGB Sliders
    local function createSlider(name, yPos, defaultValue)
        local SliderLabel = Instance.new("TextLabel")
        SliderLabel.Size = UDim2.new(0, 30, 0, 20)
        SliderLabel.Position = UDim2.new(0, 20, 0, yPos)
        SliderLabel.BackgroundTransparency = 1
        SliderLabel.Text = name .. ":"
        SliderLabel.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
        SliderLabel.Font = Enum.Font.Gotham
        SliderLabel.TextSize = 14
        SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        SliderLabel.Parent = PickerFrame
        
        local SliderBg = Instance.new("Frame")
        SliderBg.Size = UDim2.new(0, 180, 0, 6)
        SliderBg.Position = UDim2.new(0, 60, 0, yPos + 7)
        SliderBg.BackgroundColor3 = self.Theme.Tertiary or Color3.fromRGB(28, 28, 32)
        SliderBg.BorderSizePixel = 0
        SliderBg.Parent = PickerFrame
        
        local SliderFill = Instance.new("Frame")
        SliderFill.Size = UDim2.new(defaultValue / 255, 0, 1, 0)
        SliderFill.BackgroundColor3 = self.Theme.Primary or Color3.fromRGB(0, 180, 255)
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBg
        
        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.Size = UDim2.new(0, 40, 0, 20)
        ValueLabel.Position = UDim2.new(0, 250, 0, yPos)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Text = tostring(defaultValue)
        ValueLabel.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
        ValueLabel.Font = Enum.Font.Gotham
        ValueLabel.TextSize = 14
        ValueLabel.Parent = PickerFrame
        
        local value = defaultValue
        local dragging = false
        
        local function updateSlider(input)
            local relativeX = math.clamp(input.Position.X - SliderBg.AbsolutePosition.X, 0, SliderBg.AbsoluteSize.X)
            local percentage = relativeX / SliderBg.AbsoluteSize.X
            value = math.floor(percentage * 255)
            SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
            ValueLabel.Text = tostring(value)
            return value
        end
        
        SliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                updateSlider(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateSlider(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        return function() return value end
    end
    
    local getRed = createSlider("R", 60, r)
    local getGreen = createSlider("G", 100, g)
    local getBlue = createSlider("B", 140, b)
    
    -- Preview
    local Preview = Instance.new("Frame")
    Preview.Size = UDim2.new(0, 260, 0, 80)
    Preview.Position = UDim2.new(0, 20, 0, 180)
    Preview.BackgroundColor3 = defaultColor
    Preview.BorderSizePixel = 0
    Preview.Parent = PickerFrame
    
    local PreviewCorner = Instance.new("UICorner")
    PreviewCorner.CornerRadius = UDim.new(0, 8)
    PreviewCorner.Parent = Preview
    
    -- Update preview
    local updateTask = task.spawn(function()
        while PickerFrame.Parent do
            pcall(function()
                Preview.BackgroundColor3 = Color3.fromRGB(getRed(), getGreen(), getBlue())
            end)
            task.wait(0.05)
        end
    end)
    
    -- Buttons
    local ApplyBtn = Instance.new("Frame")
    ApplyBtn.Size = UDim2.new(0, 120, 0, 35)
    ApplyBtn.Position = UDim2.new(0, 20, 0, 280)
    ApplyBtn.BackgroundColor3 = self.Theme.Primary or Color3.fromRGB(0, 180, 255)
    ApplyBtn.BorderSizePixel = 0
    ApplyBtn.Parent = PickerFrame
    
    local ApplyCorner = Instance.new("UICorner")
    ApplyCorner.CornerRadius = UDim.new(0, 8)
    ApplyCorner.Parent = ApplyBtn
    
    local ApplyText = Instance.new("TextLabel")
    ApplyText.Size = UDim2.new(1, 0, 1, 0)
    ApplyText.BackgroundTransparency = 1
    ApplyText.Text = "Apply"
    ApplyText.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    ApplyText.Font = Enum.Font.GothamBold
    ApplyText.TextSize = 14
    ApplyText.Parent = ApplyBtn
    
    ApplyBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            pcall(function()
                local finalColor = Color3.fromRGB(getRed(), getGreen(), getBlue())
                if callback then callback(finalColor) end
            end)
            task.cancel(updateTask)
            PickerFrame:Destroy()
        end
    end)
    
    local CancelBtn = Instance.new("Frame")
    CancelBtn.Size = UDim2.new(0, 120, 0, 35)
    CancelBtn.Position = UDim2.new(0, 160, 0, 280)
    CancelBtn.BackgroundColor3 = self.Theme.Tertiary or Color3.fromRGB(28, 28, 32)
    CancelBtn.BorderSizePixel = 0
    CancelBtn.Parent = PickerFrame
    
    local CancelCorner = Instance.new("UICorner")
    CancelCorner.CornerRadius = UDim.new(0, 8)
    CancelCorner.Parent = CancelBtn
    
    local CancelText = Instance.new("TextLabel")
    CancelText.Size = UDim2.new(1, 0, 1, 0)
    CancelText.BackgroundTransparency = 1
    CancelText.Text = "Cancel"
    CancelText.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    CancelText.Font = Enum.Font.GothamBold
    CancelText.TextSize = 14
    CancelText.Parent = CancelBtn
    
    CancelBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            task.cancel(updateTask)
            PickerFrame:Destroy()
        end
    end)
end

-- Modal Dialog - FIXED: Better error handling
function PrestigeUI:ShowDialog(options)
    if not self.ScreenGui or not self.Theme then 
        warn("ShowDialog: ScreenGui or Theme not initialized")
        return
    end
    
    options = options or {}
    local title = options.Title or "Dialog"
    local message = options.Message or ""
    local buttons = options.Buttons or {{"OK", function() end}}
    
    local Overlay = Instance.new("Frame")
    Overlay.Name = "DialogOverlay"
    Overlay.Size = UDim2.new(1, 0, 1, 0)
    Overlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Overlay.BackgroundTransparency = 0.5
    Overlay.BorderSizePixel = 0
    Overlay.ZIndex = 999
    Overlay.Parent = self.ScreenGui
    
    local Dialog = Instance.new("Frame")
    Dialog.Size = UDim2.new(0, 400, 0, 200)
    Dialog.Position = UDim2.new(0.5, -200, 0.5, -100)
    Dialog.BackgroundColor3 = self.Theme.Secondary or Color3.fromRGB(22, 22, 25)
    Dialog.BorderSizePixel = 0
    Dialog.ZIndex = 1000
    Dialog.Parent = Overlay
    
    local DialogCorner = Instance.new("UICorner")
    DialogCorner.CornerRadius = UDim.new(0, 12)
    DialogCorner.Parent = Dialog
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -40, 0, 40)
    Title.Position = UDim2.new(0, 20, 0, 15)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.TextColor3 = self.Theme.Primary or Color3.fromRGB(0, 180, 255)
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Dialog
    
    local Message = Instance.new("TextLabel")
    Message.Size = UDim2.new(1, -40, 0, 80)
    Message.Position = UDim2.new(0, 20, 0, 60)
    Message.BackgroundTransparency = 1
    Message.Text = message
    Message.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    Message.Font = Enum.Font.Gotham
    Message.TextSize = 14
    Message.TextXAlignment = Enum.TextXAlignment.Left
    Message.TextYAlignment = Enum.TextYAlignment.Top
    Message.TextWrapped = true
    Message.Parent = Dialog
    
    -- Buttons
    local buttonWidth = (360 / #buttons) - 10
    for i, btnData in ipairs(buttons) do
        local btnText, btnCallback = btnData[1], btnData[2]
        
        local Btn = Instance.new("Frame")
        Btn.Size = UDim2.new(0, buttonWidth, 0, 35)
        Btn.Position = UDim2.new(0, 20 + (i - 1) * (buttonWidth + 10), 0, 150)
        Btn.BackgroundColor3 = i == 1 and (self.Theme.Primary or Color3.fromRGB(0, 180, 255)) or (self.Theme.Tertiary or Color3.fromRGB(28, 28, 32))
        Btn.BorderSizePixel = 0
        Btn.Parent = Dialog
        
        local BtnCorner = Instance.new("UICorner")
        BtnCorner.CornerRadius = UDim.new(0, 8)
        BtnCorner.Parent = Btn
        
        local BtnLabel = Instance.new("TextLabel")
        BtnLabel.Size = UDim2.new(1, 0, 1, 0)
        BtnLabel.BackgroundTransparency = 1
        BtnLabel.Text = btnText
        BtnLabel.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
        BtnLabel.Font = Enum.Font.GothamBold
        BtnLabel.TextSize = 14
        BtnLabel.Parent = Btn
        
        Btn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if btnCallback then 
                    pcall(function() btnCallback() end)
                end
                Overlay:Destroy()
            end
        end)
        
        Btn.MouseEnter:Connect(function()
            tween(Btn, {BackgroundColor3 = self.Theme.Primary or Color3.fromRGB(0, 180, 255)}, 0.2)
        end)
        Btn.MouseLeave:Connect(function()
            local defaultColor = i == 1 and (self.Theme.Primary or Color3.fromRGB(0, 180, 255)) or (self.Theme.Tertiary or Color3.fromRGB(28, 28, 32))
            tween(Btn, {BackgroundColor3 = defaultColor}, 0.2)
        end)
    end
    
    -- Animate in
    Dialog.BackgroundTransparency = 1
    tween(Dialog, {BackgroundTransparency = 0}, 0.3)
    Dialog.Size = UDim2.new(0, 350, 0, 180)
    tween(Dialog, {Size = UDim2.new(0, 400, 0, 200)}, 0.3, Enum.EasingStyle.Back)
end

-- Tooltip System - FIXED: Better error handling
function PrestigeUI:AddTooltip(element, text)
    if not element or not self.ScreenGui or not self.Theme then 
        warn("AddTooltip: Invalid element, ScreenGui, or Theme")
        return
    end
    
    local Tooltip = Instance.new("Frame")
    Tooltip.Name = "Tooltip"
    Tooltip.Size = UDim2.new(0, 200, 0, 40)
    Tooltip.BackgroundColor3 = self.Theme.Dark or Color3.fromRGB(18, 18, 20)
    Tooltip.BorderSizePixel = 0
    Tooltip.Visible = false
    Tooltip.ZIndex = 10000
    Tooltip.Parent = self.ScreenGui
    
    local TooltipCorner = Instance.new("UICorner")
    TooltipCorner.CornerRadius = UDim.new(0, 8)
    TooltipCorner.Parent = Tooltip
    
    local TooltipText = Instance.new("TextLabel")
    TooltipText.Size = UDim2.new(1, -20, 1, 0)
    TooltipText.Position = UDim2.new(0, 10, 0, 0)
    TooltipText.BackgroundTransparency = 1
    TooltipText.Text = text or ""
    TooltipText.TextColor3 = self.Theme.Text or Color3.fromRGB(255, 255, 255)
    TooltipText.Font = Enum.Font.Gotham
    TooltipText.TextSize = 12
    TooltipText.TextWrapped = true
    TooltipText.TextXAlignment = Enum.TextXAlignment.Left
    TooltipText.Parent = Tooltip
    
    element.MouseEnter:Connect(function()
        Tooltip.Visible = true
        Tooltip.BackgroundTransparency = 1
        tween(Tooltip, {BackgroundTransparency = 0}, 0.2)
    end)
    
    element.MouseLeave:Connect(function()
        tween(Tooltip, {BackgroundTransparency = 1}, 0.2)
        task.wait(0.2)
        Tooltip.Visible = false
    end)
    
    element.MouseMoved:Connect(function(x, y)
        Tooltip.Position = UDim2.new(0, x + 15, 0, y + 15)
    end)
end

-- AddSection: True group container for child elements in a tab. Maximizes layout control/UX.
function PrestigeUI:AddSection(parentTab, title)
    local Section = Instance.new("Frame")
    Section.Name = (title or "Section") .. "Container"
    Section.BackgroundTransparency = 1
    Section.Size = UDim2.new(1, 0, 0, 0)
    Section.AutomaticSize = Enum.AutomaticSize.Y
    Section.Parent = parentTab

    local Layout = Instance.new("UIListLayout")
    Layout.Parent = Section
    Layout.SortOrder = Enum.SortOrder.LayoutOrder
    Layout.Padding = UDim.new(0, 7)

    local Pad = Instance.new("UIPadding")
    Pad.Parent = Section
    Pad.PaddingLeft = UDim.new(0, 6)
    Pad.PaddingRight = UDim.new(0, 6)
    Pad.PaddingTop = UDim.new(0, 4)
    Pad.PaddingBottom = UDim.new(0, 6)

    if title and title ~= "" then
        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Size = UDim2.new(1, 0, 0, 18)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = title
        TitleLabel.TextColor3 = self.Theme.TextSecondary
        TitleLabel.Font = Enum.Font.GothamBold
        TitleLabel.TextSize = 13
        TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        TitleLabel.Parent = Section
        local Line = Instance.new("Frame")
        Line.Size = UDim2.new(1, 0, 0, 2)
        Line.BackgroundColor3 = self.Theme.Tertiary
        Line.BorderSizePixel = 0
        Line.Parent = Section
    end
    return Section
end

-- USAGE: 
-- local tab = Window:AddTab("Main")
-- local sec = Window:AddSection(tab, "My Section")
-- Window:AddButton(sec, "Press Me", function() ... end)

function PrestigeUI:SetTheme(themeName)
    if ThemePresets and ThemePresets[themeName] then
        self.Theme = table.clone(ThemePresets[themeName])
        self:ApplyTheme()
    end
end

_G.PrestigeUI = PrestigeUI
return PrestigeUI

_G.PrestigeUI = PrestigeUI
return PrestigeUI
