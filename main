-- ========================================
-- PRESTIGE UI LIBRARY (Enhanced Edition)
-- Features: Custom Themes, Notifications, Auto-Save, Search, Minimize to Corner
-- ========================================

local PrestigeUI = {}
PrestigeUI.__index = PrestigeUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Theme Presets
local ThemePresets = {
    Dark = {
        Primary = Color3.fromRGB(0, 180, 255),
        Secondary = Color3.fromRGB(22, 22, 25),
        Tertiary = Color3.fromRGB(28, 28, 32),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 190),
        Dark = Color3.fromRGB(18, 18, 20),
        Accent = Color3.fromRGB(255, 100, 100)
    },
    Ocean = {
        Primary = Color3.fromRGB(52, 152, 219),
        Secondary = Color3.fromRGB(20, 30, 48),
        Tertiary = Color3.fromRGB(30, 40, 58),
        Text = Color3.fromRGB(236, 240, 241),
        TextSecondary = Color3.fromRGB(149, 165, 166),
        Dark = Color3.fromRGB(15, 25, 40),
        Accent = Color3.fromRGB(46, 204, 113)
    },
    Sunset = {
        Primary = Color3.fromRGB(255, 107, 107),
        Secondary = Color3.fromRGB(40, 30, 35),
        Tertiary = Color3.fromRGB(50, 38, 43),
        Text = Color3.fromRGB(255, 250, 240),
        TextSecondary = Color3.fromRGB(200, 180, 170),
        Dark = Color3.fromRGB(30, 22, 28),
        Accent = Color3.fromRGB(255, 159, 64)
    },
    Forest = {
        Primary = Color3.fromRGB(46, 213, 115),
        Secondary = Color3.fromRGB(25, 35, 30),
        Tertiary = Color3.fromRGB(32, 42, 37),
        Text = Color3.fromRGB(245, 255, 250),
        TextSecondary = Color3.fromRGB(160, 180, 170),
        Dark = Color3.fromRGB(18, 28, 23),
        Accent = Color3.fromRGB(255, 195, 18)
    },
    Midnight = {
        Primary = Color3.fromRGB(138, 43, 226),
        Secondary = Color3.fromRGB(15, 15, 25),
        Tertiary = Color3.fromRGB(20, 20, 32),
        Text = Color3.fromRGB(240, 240, 255),
        TextSecondary = Color3.fromRGB(150, 150, 180),
        Dark = Color3.fromRGB(10, 10, 18),
        Accent = Color3.fromRGB(255, 71, 87)
    },
    Purple = {
        Primary = Color3.fromRGB(155, 89, 182),
        Secondary = Color3.fromRGB(30, 25, 35),
        Tertiary = Color3.fromRGB(38, 32, 43),
        Text = Color3.fromRGB(250, 245, 255),
        TextSecondary = Color3.fromRGB(180, 170, 190),
        Dark = Color3.fromRGB(22, 18, 28),
        Accent = Color3.fromRGB(255, 118, 117)
    }
}

local Theme = ThemePresets.Dark

-- Animation utility function
local function tween(object, properties, duration, style, direction)
    duration = duration or 0.3
    style = style or Enum.EasingStyle.Quad
    direction = direction or Enum.EasingDirection.Out
    
    local tweenInfo = TweenInfo.new(duration, style, direction)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

function PrestigeUI:Create(title)
    local self = setmetatable({}, PrestigeUI)
    self.Connections = {}
    self.Theme = ThemePresets.Dark  -- Use Dark preset as default
    self.Notifications = {}
    self.ConfigData = {}
    self.ToggleKeybind = Enum.KeyCode.RightShift
    self.MinimizedIcon = nil
    title = title or "Prestige Hub"
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "PrestigeUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.DisplayOrder = 999999
    ScreenGui.IgnoreGuiInset = true
    
    local LoadingFrame = Instance.new("Frame")
    LoadingFrame.Name = "LoadingFrame"
    LoadingFrame.Size = UDim2.new(0, 400, 0, 200)
    LoadingFrame.Position = UDim2.new(0.5, -200, 0.5, -100)
    LoadingFrame.BackgroundColor3 = self.Theme.Dark
    LoadingFrame.BorderSizePixel = 0
    LoadingFrame.Parent = ScreenGui
    
    local LoadingCorner = Instance.new("UICorner")
    LoadingCorner.CornerRadius = UDim.new(0, 15)
    LoadingCorner.Parent = LoadingFrame
    
    local LoadingTitle = Instance.new("TextLabel")
    LoadingTitle.Size = UDim2.new(1, 0, 0, 50)
    LoadingTitle.Position = UDim2.new(0, 0, 0, 40)
    LoadingTitle.BackgroundTransparency = 1
    LoadingTitle.Text = string.upper(title)
    LoadingTitle.TextColor3 = self.Theme.Primary
    LoadingTitle.Font = Enum.Font.GothamBold
    LoadingTitle.TextSize = 28
    LoadingTitle.Parent = LoadingFrame
    
    local LoadingBarBg = Instance.new("Frame")
    LoadingBarBg.Name = "LoadingBarBg"
    LoadingBarBg.Size = UDim2.new(0, 300, 0, 8)
    LoadingBarBg.Position = UDim2.new(0.5, -150, 0, 120)
    LoadingBarBg.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    LoadingBarBg.BorderSizePixel = 0
    LoadingBarBg.Parent = LoadingFrame
    
    local LoadingBarBgCorner = Instance.new("UICorner")
    LoadingBarBgCorner.CornerRadius = UDim.new(0, 4)
    LoadingBarBgCorner.Parent = LoadingBarBg
    
    local LoadingBar = Instance.new("Frame")
    LoadingBar.Name = "LoadingBar"
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.BackgroundColor3 = self.Theme.Primary
    LoadingBar.BorderSizePixel = 0
    LoadingBar.Parent = LoadingBarBg
    
    local LoadingBarCorner = Instance.new("UICorner")
    LoadingBarCorner.CornerRadius = UDim.new(0, 4)
    LoadingBarCorner.Parent = LoadingBar
    
    local LoadingBarGlow = Instance.new("UIGradient")
    LoadingBarGlow.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, self.Theme.Primary),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(100, 220, 255)),
        ColorSequenceKeypoint.new(1, self.Theme.Primary)
    }
    LoadingBarGlow.Parent = LoadingBar
    
    local LoadingText = Instance.new("TextLabel")
    LoadingText.Size = UDim2.new(1, 0, 0, 30)
    LoadingText.Position = UDim2.new(0, 0, 0, 145)
    LoadingText.BackgroundTransparency = 1
    LoadingText.Text = "Loading... 0%"
    LoadingText.TextColor3 = self.Theme.TextSecondary
    LoadingText.Font = Enum.Font.Gotham
    LoadingText.TextSize = 14
    LoadingText.Parent = LoadingFrame
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 700, 0, 450)
    MainFrame.Position = UDim2.new(0.5, -350, 0.5, -225)
    MainFrame.BackgroundColor3 = self.Theme.Dark
    MainFrame.BorderSizePixel = 0
    MainFrame.Visible = false
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 15)
    MainCorner.Parent = MainFrame
    
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 45)
    TopBar.BackgroundColor3 = self.Theme.Secondary
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    local TopBarCorner = Instance.new("UICorner")
    TopBarCorner.CornerRadius = UDim.new(0, 15)
    TopBarCorner.Parent = TopBar
    
    local TopBarBottom = Instance.new("Frame")
    TopBarBottom.Size = UDim2.new(1, 0, 0, 15)
    TopBarBottom.Position = UDim2.new(0, 0, 1, -15)
    TopBarBottom.BackgroundColor3 = self.Theme.Secondary
    TopBarBottom.BorderSizePixel = 0
    TopBarBottom.Parent = TopBar
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(0, 200, 1, 0)
    TitleLabel.Position = UDim2.new(0, 15, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.TextColor3 = self.Theme.Text
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 16
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TopBar
    
    local MinimizeBtn = Instance.new("Frame")
    MinimizeBtn.Name = "MinimizeBtn"
    MinimizeBtn.Size = UDim2.new(0, 35, 0, 35)
    MinimizeBtn.Position = UDim2.new(1, -80, 0.5, -17.5)
    MinimizeBtn.BackgroundColor3 = self.Theme.Primary
    MinimizeBtn.BorderSizePixel = 0
    MinimizeBtn.Parent = TopBar

    local MinimizeText = Instance.new("TextLabel")
    MinimizeText.Size = UDim2.new(1, 0, 1, 0)
    MinimizeText.BackgroundTransparency = 1
    MinimizeText.Text = "_"
    MinimizeText.TextColor3 = self.Theme.Text
    MinimizeText.Font = Enum.Font.GothamBold
    MinimizeText.TextSize = 20
    MinimizeText.Parent = MinimizeBtn
            
    local MinimizeCorner = Instance.new("UICorner")
    MinimizeCorner.CornerRadius = UDim.new(0, 8)
    MinimizeCorner.Parent = MinimizeBtn
    
    local CloseBtn = Instance.new("Frame")
    CloseBtn.Name = "CloseBtn"
    CloseBtn.Size = UDim2.new(0, 35, 0, 35)
    CloseBtn.Position = UDim2.new(1, -40, 0.5, -17.5)
    CloseBtn.BackgroundColor3 = self.Theme.Primary
    CloseBtn.BorderSizePixel = 0
    CloseBtn.Parent = TopBar

    local CloseText = Instance.new("TextLabel")
    CloseText.Size = UDim2.new(1, 0, 1, 0)
    CloseText.BackgroundTransparency = 1
    CloseText.Text = "X"
    CloseText.TextColor3 = self.Theme.Text
    CloseText.Font = Enum.Font.GothamBold
    CloseText.TextSize = 18
    CloseText.Parent = CloseBtn
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 8)
    CloseCorner.Parent = CloseBtn
    
    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.Size = UDim2.new(0, 180, 0, 387)
    Sidebar.Position = UDim2.new(0, 8, 0, 53)
    Sidebar.BackgroundColor3 = self.Theme.Secondary
    Sidebar.BorderSizePixel = 0
    Sidebar.Parent = MainFrame
    
    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 12)
    SidebarCorner.Parent = Sidebar
    
    local SidebarList = Instance.new("UIListLayout")
    SidebarList.Padding = UDim.new(0, 8)
    SidebarList.Parent = Sidebar
    
    local SidebarPadding = Instance.new("UIPadding")
    SidebarPadding.PaddingTop = UDim.new(0, 12)
    SidebarPadding.PaddingLeft = UDim.new(0, 10)
    SidebarPadding.PaddingRight = UDim.new(0, 10)
    SidebarPadding.PaddingBottom = UDim.new(0, 12)
    SidebarPadding.Parent = Sidebar
    
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Size = UDim2.new(0, 496, 0, 387)
    ContentArea.Position = UDim2.new(0, 196, 0, 53)
    ContentArea.BackgroundColor3 = self.Theme.Secondary
    ContentArea.BorderSizePixel = 0
    ContentArea.Parent = MainFrame
    
    local ContentCorner = Instance.new("UICorner")
    ContentCorner.CornerRadius = UDim.new(0, 12)
    ContentCorner.Parent = ContentArea
    
    local ContentGradient = Instance.new("UIGradient")
    ContentGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, self.Theme.Secondary),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 28))
    }
    ContentGradient.Rotation = 90
    ContentGradient.Parent = ContentArea
    
    ScreenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    self.ScreenGui = ScreenGui
    self.MainFrame = MainFrame
    self.TopBar = TopBar
    self.Title = TitleLabel
    self.MinimizeBtn = MinimizeBtn
    self.CloseBtn = CloseBtn
    self.Sidebar = Sidebar
    self.ContentArea = ContentArea
    self.Tabs = {}
    self.ActiveTab = nil
    
    -- Button hover animations
    MinimizeBtn.MouseEnter:Connect(function()
        tween(MinimizeBtn, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
    end)
    MinimizeBtn.MouseLeave:Connect(function()
        tween(MinimizeBtn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        tween(CloseBtn, {BackgroundColor3 = self.Theme.Accent}, 0.2)
    end)
    CloseBtn.MouseLeave:Connect(function()
        tween(CloseBtn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    -- Loading animation with proper sequencing
    self.Connections.LoadingTask = task.spawn(function()
        for i = 0, 100 do
            task.wait(0.015)
            LoadingBar:TweenSize(UDim2.new(i/100, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.015, true)
            LoadingText.Text = "Loading... " .. i .. "%"
        end
        task.wait(0.3)
        
        -- Fade everything in LoadingFrame together
        local fadeOutTweens = {}
        table.insert(fadeOutTweens, TweenService:Create(LoadingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}))
        table.insert(fadeOutTweens, TweenService:Create(LoadingTitle, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}))
        table.insert(fadeOutTweens, TweenService:Create(LoadingText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}))
        table.insert(fadeOutTweens, TweenService:Create(LoadingBarBg, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}))
        table.insert(fadeOutTweens, TweenService:Create(LoadingBar, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}))
        
        for _, tweenObj in pairs(fadeOutTweens) do
            tweenObj:Play()
        end
        
        task.wait(0.5)
        LoadingFrame:Destroy()
        
        -- Show main frame with animation
        MainFrame.Visible = true
        MainFrame.BackgroundTransparency = 1
        MainFrame.Size = UDim2.new(0, 600, 0, 400)
        MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
        
        tween(MainFrame, {BackgroundTransparency = 0}, 0.3)
        tween(MainFrame, {
            Size = UDim2.new(0, 700, 0, 450),
            Position = UDim2.new(0.5, -350, 0.5, -225)
        }, 0.5, Enum.EasingStyle.Back)
    end)
    
    local dragging = false
    local dragInput, mousePos, framePos
    self.Connections.TopBarInputBegan = TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    self.Connections.TopBarInputChanged = TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    self.Connections.UserInputChanged = UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            MainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
    
    local minimized = false
    self.Connections.MinimizeClick = MinimizeBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            minimized = not minimized
            if minimized then
                tween(MainFrame, {Size = UDim2.new(0, 700, 0, 45)}, 0.4, Enum.EasingStyle.Quad)
                MinimizeText.Text = "□"
                Sidebar.Visible = false
                ContentArea.Visible = false
            else
                tween(MainFrame, {Size = UDim2.new(0, 700, 0, 450)}, 0.4, Enum.EasingStyle.Quad)
                MinimizeText.Text = "_"
                Sidebar.Visible = true
                ContentArea.Visible = true
            end
        end
    end)

    -- Keybind toggle
    self.Connections.KeybindToggle = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == self.ToggleKeybind then
            if MainFrame.Visible then
                self:MinimizeToCorner()
            else
                self:RestoreFromCorner()
            end
        end
    end)

    -- Load saved config
    self:LoadConfig()

    self.Connections.CloseClick = CloseBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self:Close()
        end
    end)

    return self
end

function PrestigeUI:Close()
    if self.Closing then return end
    self.Closing = true
    
    -- Save state before closing
    self:SaveConfig()
    
    -- Animate close
    local closeTween = tween(self.CloseBtn, {BackgroundColor3 = Color3.fromRGB(200, 50, 50)}, 0.1)
    closeTween.Completed:Wait()
    
    local mainTween = tween(self.MainFrame, {
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundTransparency = 1
    }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
    mainTween.Completed:Wait()
    
    -- Cleanup connections
    for name, conn in pairs(self.Connections or {}) do
        if typeof(conn) == "RBXScriptConnection" then
            pcall(function()
                conn:Disconnect()
            end)
        end
    end
    self.Connections = {}
    
    -- Destroy GUI
    if self.ScreenGui then
        pcall(function()
            self.ScreenGui:Destroy()
        end)
    end
    
    table.clear(self)
    _G.PrestigeUI = nil
    
    print("[PrestigeUI] Closed and cleaned successfully.")
end

function PrestigeUI:AddTab(tabName)
    local Container = Instance.new("Frame")
    Container.Name = tabName .. "TabContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.ClipsDescendants = true
    Container.Parent = self.Sidebar
    
    local TabBtn = Instance.new("Frame")
    TabBtn.Name = tabName .. "Tab"
    TabBtn.Size = UDim2.new(1, 0, 1, 0)
    TabBtn.BackgroundColor3 = self.Theme.Tertiary
    TabBtn.BorderSizePixel = 0
    TabBtn.Parent = Container
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 10)
    TabCorner.Parent = TabBtn
    
    local TabText = Instance.new("TextLabel")
    TabText.Size = UDim2.new(1, 0, 1, 0)
    TabText.BackgroundTransparency = 1
    TabText.Text = tabName
    TabText.TextColor3 = self.Theme.Text
    TabText.Font = Enum.Font.GothamBold
    TabText.TextSize = 14
    TabText.Parent = TabBtn
    
    local Content = Instance.new("ScrollingFrame")
    Content.Name = tabName .. "Content"
    Content.Size = UDim2.new(1, 0, 1, 0)
    Content.BackgroundTransparency = 1
    Content.BorderSizePixel = 0
    Content.ScrollBarThickness = 6
    Content.ScrollBarImageColor3 = self.Theme.Primary
    Content.Visible = false
    Content.CanvasSize = UDim2.new(0, 0, 0, 0)
    Content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    Content.Parent = self.ContentArea
    
    local ContentList = Instance.new("UIListLayout")
    ContentList.Padding = UDim.new(0, 10)
    ContentList.Parent = Content
    
    local ContentPadding = Instance.new("UIPadding")
    ContentPadding.PaddingTop = UDim.new(0, 15)
    ContentPadding.PaddingLeft = UDim.new(0, 15)
    ContentPadding.PaddingRight = UDim.new(0, 15)
    ContentPadding.PaddingBottom = UDim.new(0, 15)
    ContentPadding.Parent = Content

    if self.ActiveTab == nil then
        self.ActiveTab = tabName
        TabBtn.BackgroundColor3 = self.Theme.Primary
        Content.Visible = true
    end
    
    -- Tab hover animation
    TabBtn.MouseEnter:Connect(function()
        if self.ActiveTab ~= tabName then
            tween(TabBtn, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
        end
    end)
    TabBtn.MouseLeave:Connect(function()
        if self.ActiveTab ~= tabName then
            tween(TabBtn, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        end
    end)
    
    TabBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self.ActiveTab = tabName
            for name, tab in pairs(self.Tabs) do
                if name == tabName then
                    tween(tab.Button, {BackgroundColor3 = self.Theme.Primary}, 0.3)
                    tab.Content.Visible = true
                else
                    tween(tab.Button, {BackgroundColor3 = self.Theme.Tertiary}, 0.3)
                    tab.Content.Visible = false
                end
            end
        end
    end)
    
    self.Tabs[tabName] = {Button = TabBtn, Content = Content, Name = tabName, Container = Container}
    return Content
end

function PrestigeUI:RemoveTab(tabName)
    if self.Tabs[tabName] then
        self.Tabs[tabName].Container:Destroy()
        self.Tabs[tabName].Content:Destroy()
        self.Tabs[tabName] = nil
        if self.ActiveTab == tabName then
            local nextTab = next(self.Tabs)
            if nextTab then
                self.Tabs[nextTab].Button.BackgroundColor3 = self.Theme.Primary
                self.Tabs[nextTab].Content.Visible = true
                self.ActiveTab = nextTab
            else
                self.ActiveTab = nil
            end
        end
    end
end

function PrestigeUI:AddButton(parent, text, callback)
    local Container = Instance.new("Frame")
    Container.Name = text .. "Container"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.ClipsDescendants = false
    Container.Parent = parent
    
    local Btn = Instance.new("Frame")
    Btn.Name = text .. "Button"
    Btn.Size = UDim2.new(1, 0, 1, 0)
    Btn.Position = UDim2.new(0, 0, 0, 0)
    Btn.BackgroundColor3 = self.Theme.Primary
    Btn.BorderSizePixel = 0
    Btn.Parent = Container
    
    local BtnCorner = Instance.new("UICorner")
    BtnCorner.CornerRadius = UDim.new(0, 8)
    BtnCorner.Parent = Btn
    
    local BtnText = Instance.new("TextLabel")
    BtnText.Name = "Text"
    BtnText.Size = UDim2.new(1, 0, 1, 0)
    BtnText.BackgroundTransparency = 1
    BtnText.Text = text
    BtnText.TextColor3 = self.Theme.Text
    BtnText.Font = Enum.Font.GothamBold
    BtnText.TextSize = 14
    BtnText.Parent = Btn

    -- Button hover and click animations
    Btn.MouseEnter:Connect(function()
        tween(Btn, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
        tween(Btn, {Size = UDim2.new(1, 5, 1, 0)}, 0.2, Enum.EasingStyle.Back)
    end)
    Btn.MouseLeave:Connect(function()
        tween(Btn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        tween(Btn, {Size = UDim2.new(1, 0, 1, 0)}, 0.2)
    end)
    
    Btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            tween(Btn, {Size = UDim2.new(1, -5, 0.9, 0)}, 0.1)
            if callback then callback() end
        end
    end)
    
    Btn.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            tween(Btn, {Size = UDim2.new(1, 5, 1, 0)}, 0.2, Enum.EasingStyle.Back)
        end
    end)
    
    return Container
end

function PrestigeUI:AddLabel(parent, text, textSize)
    textSize = textSize or 16
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, 0, 0, textSize + 8)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = textSize
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = parent
    return Label
end

function PrestigeUI:AddParagraph(parent, title, content)
    local Container = Instance.new("Frame")
    Container.Name = "Paragraph"
    Container.Size = UDim2.new(1, 0, 0, 60)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Padding = Instance.new("UIPadding")
    Padding.PaddingTop = UDim.new(0, 10)
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.PaddingBottom = UDim.new(0, 10)
    Padding.Parent = Container
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 18)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.TextColor3 = self.Theme.Primary
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Container
    
    local ContentLabel = Instance.new("TextLabel")
    ContentLabel.Name = "Content"
    ContentLabel.Size = UDim2.new(1, 0, 0, 32)
    ContentLabel.Position = UDim2.new(0, 0, 0, 18)
    ContentLabel.BackgroundTransparency = 1
    ContentLabel.Text = content
    ContentLabel.TextColor3 = self.Theme.TextSecondary
    ContentLabel.Font = Enum.Font.Gotham
    ContentLabel.TextSize = 12
    ContentLabel.TextXAlignment = Enum.TextXAlignment.Left
    ContentLabel.TextWrapped = true
    ContentLabel.Parent = Container
    return Container
end

function PrestigeUI:AddTextBox(parent, placeholder, callback)
    local Container = Instance.new("Frame")
    Container.Name = "TextBoxContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local TextBox = Instance.new("TextBox")
    TextBox.Name = "TextBox"
    TextBox.Size = UDim2.new(1, 0, 1, 0)
    TextBox.BackgroundTransparency = 1
    TextBox.BorderSizePixel = 0
    TextBox.Text = ""
    TextBox.PlaceholderText = placeholder or "Enter text..."
    TextBox.TextColor3 = self.Theme.Text
    TextBox.PlaceholderColor3 = self.Theme.TextSecondary
    TextBox.Font = Enum.Font.Gotham
    TextBox.TextSize = 14
    TextBox.Parent = Container
    
    local Padding = Instance.new("UIPadding")
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.Parent = TextBox
    
    -- TextBox focus animations
    TextBox.Focused:Connect(function()
        tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
    end)
    TextBox.FocusLost:Connect(function(enterPressed)
        tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        if enterPressed and callback then
            callback(TextBox.Text)
        end
    end)
    
    return TextBox
end

function PrestigeUI:AddToggle(parent, text, callback)
    local default = false
    local Container = Instance.new("Frame")
    Container.Name = "ToggleContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, -70, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ToggleBg = Instance.new("Frame")
    ToggleBg.Name = "ToggleBg"
    ToggleBg.Size = UDim2.new(0, 50, 0, 25)
    ToggleBg.Position = UDim2.new(1, -50, 0.5, -12.5)
    ToggleBg.BackgroundColor3 = self.Theme.Tertiary
    ToggleBg.BorderSizePixel = 0
    ToggleBg.Parent = Container
    
    local ToggleBgCorner = Instance.new("UICorner")
    ToggleBgCorner.CornerRadius = UDim.new(0, 12)
    ToggleBgCorner.Parent = ToggleBg
    
    local ToggleButton = Instance.new("Frame")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Size = UDim2.new(0, 21, 0, 21)
    ToggleButton.Position = UDim2.new(0, 2, 0.5, -10.5)
    ToggleButton.BackgroundColor3 = self.Theme.Primary
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Parent = ToggleBg
    
    local ToggleButtonCorner = Instance.new("UICorner")
    ToggleButtonCorner.CornerRadius = UDim.new(0, 10)
    ToggleButtonCorner.Parent = ToggleButton
    
    local toggled = default or false
    
    -- Apply initial state
    if toggled then
        ToggleButton.Position = UDim2.new(0, 27, 0.5, -10.5)
        ToggleBg.BackgroundColor3 = self.Theme.Primary
    end
    
    -- Toggle hover animation
    ToggleBg.MouseEnter:Connect(function()
        tween(ToggleButton, {Size = UDim2.new(0, 23, 0, 23)}, 0.2, Enum.EasingStyle.Back)
    end)
    ToggleBg.MouseLeave:Connect(function()
        tween(ToggleButton, {Size = UDim2.new(0, 21, 0, 21)}, 0.2)
    end)
    
    ToggleBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            if toggled then
                tween(ToggleButton, {Position = UDim2.new(0, 27, 0.5, -10.5)}, 0.3, Enum.EasingStyle.Back)
                tween(ToggleBg, {BackgroundColor3 = self.Theme.Primary}, 0.3)
            else
                tween(ToggleButton, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.3, Enum.EasingStyle.Back)
                tween(ToggleBg, {BackgroundColor3 = self.Theme.Tertiary}, 0.3)
            end
            if callback then
                callback(toggled)
            end
        end
    end)
    
    return {Container = Container, Toggle = ToggleButton, GetState = function() return toggled end}
end

function PrestigeUI:AddDropdown(parent, placeholder, options, callback)
    local Container = Instance.new("Frame")
    Container.Name = "DropdownContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container

    local DropdownBtn = Instance.new("Frame")
    DropdownBtn.Name = "DropdownBtn"
    DropdownBtn.Size = UDim2.new(1, 0, 0, 40)
    DropdownBtn.BackgroundTransparency = 1
    DropdownBtn.BorderSizePixel = 0
    DropdownBtn.Parent = Container
    
    local DropdownText = Instance.new("TextLabel")
    DropdownText.Name = "Text"
    DropdownText.Size = UDim2.new(1, 0, 1, 0)
    DropdownText.BackgroundTransparency = 1
    DropdownText.Text = placeholder or "Select..."
    DropdownText.TextColor3 = self.Theme.TextSecondary
    DropdownText.Font = Enum.Font.Gotham
    DropdownText.TextSize = 14
    DropdownText.TextXAlignment = Enum.TextXAlignment.Left
    DropdownText.Parent = DropdownBtn

    local Padding = Instance.new("UIPadding")
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.Parent = DropdownBtn

    local DropdownList = Instance.new("ScrollingFrame")
    DropdownList.Name = "DropdownList"
    DropdownList.Size = UDim2.new(1, 0, 0, 0)
    DropdownList.Position = UDim2.new(0, 0, 0, 40)
    DropdownList.BackgroundColor3 = self.Theme.Secondary
    DropdownList.BorderSizePixel = 0
    DropdownList.ScrollBarThickness = 6
    DropdownList.ScrollBarImageColor3 = self.Theme.Primary
    DropdownList.Visible = false
    DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
    DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    DropdownList.ClipsDescendants = true
    DropdownList.Parent = Container

    local ListCorner = Instance.new("UICorner")
    ListCorner.CornerRadius = UDim.new(0, 8)
    ListCorner.Parent = DropdownList

    local ListLayout = Instance.new("UIListLayout")
    ListLayout.Padding = UDim.new(0, 5)
    ListLayout.Parent = DropdownList

    local ListPadding = Instance.new("UIPadding")
    ListPadding.PaddingTop = UDim.new(0, 5)
    ListPadding.PaddingBottom = UDim.new(0, 5)
    ListPadding.PaddingLeft = UDim.new(0, 5)
    ListPadding.PaddingRight = UDim.new(0, 5)
    ListPadding.Parent = DropdownList

    local isOpen = false
    local maxHeight = 150

    for _, option in pairs(options) do
        local OptionBtn = Instance.new("Frame")
        OptionBtn.Name = option
        OptionBtn.Size = UDim2.new(1, 0, 0, 30)
        OptionBtn.BackgroundColor3 = self.Theme.Tertiary
        OptionBtn.BorderSizePixel = 0
        OptionBtn.Parent = DropdownList

        local OptionText = Instance.new("TextLabel")
        OptionText.Size = UDim2.new(1, 0, 1, 0)
        OptionText.BackgroundTransparency = 1
        OptionText.Text = option
        OptionText.TextColor3 = self.Theme.Text
        OptionText.Font = Enum.Font.Gotham
        OptionText.TextSize = 13
        OptionText.Parent = OptionBtn

        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 6)
        OptionCorner.Parent = OptionBtn

        -- Option hover animation
        OptionBtn.MouseEnter:Connect(function()
            tween(OptionBtn, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        end)
        OptionBtn.MouseLeave:Connect(function()
            tween(OptionBtn, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        end)

        OptionBtn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                DropdownText.Text = option
                DropdownText.TextColor3 = self.Theme.Text
                if callback then callback(option) end
                isOpen = false
                tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quad)
                task.wait(0.3)
                DropdownList.Visible = false
            end
        end)
    end

    -- Dropdown hover animation
    DropdownBtn.MouseEnter:Connect(function()
        tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
    end)
    DropdownBtn.MouseLeave:Connect(function()
        if not isOpen then
            tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        end
    end)

    DropdownBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isOpen = not isOpen
            if isOpen then
                DropdownList.Visible = true
                task.wait()
                local contentHeight = ListLayout.AbsoluteContentSize.Y + ListPadding.PaddingTop.Offset + ListPadding.PaddingBottom.Offset
                tween(DropdownList, {Size = UDim2.new(1, 0, 0, math.min(contentHeight, maxHeight))}, 0.3, Enum.EasingStyle.Back)
                tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
            else
                tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quad)
                tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
                task.wait(0.3)
                DropdownList.Visible = false
            end
        end
    end)

    return Container
end

function PrestigeUI:AddSlider(parent, min, max, default, callback)
    local Container = Instance.new("Frame")
    Container.Name = "SliderContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.Size = UDim2.new(1, 0, 0, 15)
    Label.BackgroundTransparency = 1
    Label.Text = "Value: " .. (default or min)
    Label.TextColor3 = self.Theme.Text
    Label.Font = Enum.Font.GothamBold
    Label.TextSize = 12
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local SliderBg = Instance.new("Frame")
    SliderBg.Name = "SliderBg"
    SliderBg.Size = UDim2.new(1, 0, 0, 6)
    SliderBg.Position = UDim2.new(0, 0, 0, 20)
    SliderBg.BackgroundColor3 = self.Theme.Tertiary
    SliderBg.BorderSizePixel = 0
    SliderBg.Parent = Container
    
    local SliderBgCorner = Instance.new("UICorner")
    SliderBgCorner.CornerRadius = UDim.new(0, 3)
    SliderBgCorner.Parent = SliderBg
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "Fill"
    SliderFill.Size = UDim2.new(0, 0, 1, 0)
    SliderFill.BackgroundColor3 = self.Theme.Primary
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBg
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(0, 3)
    SliderFillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("Frame")
    SliderButton.Name = "SliderButton"
    SliderButton.Size = UDim2.new(0, 14, 0, 14)
    SliderButton.Position = UDim2.new(0, 0, 0.5, -7)
    SliderButton.BackgroundColor3 = self.Theme.Primary
    SliderButton.BorderSizePixel = 0
    SliderButton.Parent = SliderBg
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 7)
    ButtonCorner.Parent = SliderButton
    
    local dragging = false
    local value = default or min
    
    -- Apply initial value
    local percentage = (value - min) / (max - min)
    SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
    SliderButton.Position = UDim2.new(percentage, -7, 0.5, -7)
    
    -- Slider hover animation
    SliderButton.MouseEnter:Connect(function()
        tween(SliderButton, {Size = UDim2.new(0, 18, 0, 18)}, 0.2, Enum.EasingStyle.Back)
        tween(SliderButton, {BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2)
    end)
    SliderButton.MouseLeave:Connect(function()
        if not dragging then
            tween(SliderButton, {Size = UDim2.new(0, 14, 0, 14)}, 0.2)
            tween(SliderButton, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        end
    end)
    
    local function updateSlider(input)
        local relativeX = math.clamp(input.Position.X - SliderBg.AbsolutePosition.X, 0, SliderBg.AbsoluteSize.X)
        local percentage = relativeX / SliderBg.AbsoluteSize.X
        value = math.floor(min + (max - min) * percentage)
        value = math.clamp(value, min, max)
        
        tween(SliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
        tween(SliderButton, {Position = UDim2.new(percentage, -7, 0.5, -7)}, 0.1)
        Label.Text = "Value: " .. value
        
        if callback then
            callback(value)
        end
    end
    
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            tween(SliderButton, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            tween(SliderButton, {Size = UDim2.new(0, 14, 0, 14)}, 0.2)
            tween(SliderButton, {BackgroundColor3 = self.Theme.Primary}, 0.2)
        end
    end)
    
    SliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateSlider(input)
        end
    end)
    
    return {Container = Container, GetValue = function() return value end}
end

-- ========================================
-- NOTIFICATION SYSTEM
-- ========================================

function PrestigeUI:Notify(options)
    options = options or {}
    local title = options.Title or "Notification"
    local message = options.Message or ""
    local duration = options.Duration or 3
    local type = options.Type or "Info" -- Info, Success, Warning, Error
    
    local typeColors = {
        Info = Color3.fromRGB(52, 152, 219),
        Success = Color3.fromRGB(46, 213, 115),
        Warning = Color3.fromRGB(255, 195, 18),
        Error = Color3.fromRGB(255, 71, 87)
    }
    
    local NotifContainer = Instance.new("Frame")
    NotifContainer.Name = "Notification"
    NotifContainer.Size = UDim2.new(0, 320, 0, 80)
    NotifContainer.Position = UDim2.new(1, 340, 1, -100 - (#self.Notifications * 90))
    NotifContainer.BackgroundColor3 = self.Theme.Secondary
    NotifContainer.BorderSizePixel = 0
    NotifContainer.Parent = self.ScreenGui
    
    local NotifCorner = Instance.new("UICorner")
    NotifCorner.CornerRadius = UDim.new(0, 12)
    NotifCorner.Parent = NotifContainer
    
    local NotifAccent = Instance.new("Frame")
    NotifAccent.Name = "Accent"
    NotifAccent.Size = UDim2.new(0, 4, 1, 0)
    NotifAccent.BackgroundColor3 = typeColors[type] or typeColors.Info
    NotifAccent.BorderSizePixel = 0
    NotifAccent.Parent = NotifContainer
    
    local AccentCorner = Instance.new("UICorner")
    AccentCorner.CornerRadius = UDim.new(0, 12)
    AccentCorner.Parent = NotifAccent
    
    local AccentCover = Instance.new("Frame")
    AccentCover.Size = UDim2.new(0, 4, 1, 0)
    AccentCover.Position = UDim2.new(0, 2, 0, 0)
    AccentCover.BackgroundColor3 = typeColors[type] or typeColors.Info
    AccentCover.BorderSizePixel = 0
    AccentCover.Parent = NotifAccent
    
    local NotifTitle = Instance.new("TextLabel")
    NotifTitle.Name = "Title"
    NotifTitle.Size = UDim2.new(1, -50, 0, 25)
    NotifTitle.Position = UDim2.new(0, 15, 0, 10)
    NotifTitle.BackgroundTransparency = 1
    NotifTitle.Text = title
    NotifTitle.TextColor3 = self.Theme.Text
    NotifTitle.Font = Enum.Font.GothamBold
    NotifTitle.TextSize = 15
    NotifTitle.TextXAlignment = Enum.TextXAlignment.Left
    NotifTitle.Parent = NotifContainer
    
    local NotifMessage = Instance.new("TextLabel")
    NotifMessage.Name = "Message"
    NotifMessage.Size = UDim2.new(1, -50, 0, 40)
    NotifMessage.Position = UDim2.new(0, 15, 0, 35)
    NotifMessage.BackgroundTransparency = 1
    NotifMessage.Text = message
    NotifMessage.TextColor3 = self.Theme.TextSecondary
    NotifMessage.Font = Enum.Font.Gotham
    NotifMessage.TextSize = 12
    NotifMessage.TextXAlignment = Enum.TextXAlignment.Left
    NotifMessage.TextYAlignment = Enum.TextYAlignment.Top
    NotifMessage.TextWrapped = true
    NotifMessage.Parent = NotifContainer
    
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Name = "Close"
    CloseBtn.Size = UDim2.new(0, 20, 0, 20)
    CloseBtn.Position = UDim2.new(1, -30, 0, 10)
    CloseBtn.BackgroundTransparency = 1
    CloseBtn.Text = "×"
    CloseBtn.TextColor3 = self.Theme.TextSecondary
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.TextSize = 20
    CloseBtn.Parent = NotifContainer
    
    table.insert(self.Notifications, NotifContainer)
    
    -- Slide in animation
    tween(NotifContainer, {Position = UDim2.new(1, -330, 1, -100 - (#self.Notifications * 90))}, 0.5, Enum.EasingStyle.Back)
    
    local function removeNotif()
        for i, notif in ipairs(self.Notifications) do
            if notif == NotifContainer then
                table.remove(self.Notifications, i)
                break
            end
        end
        
        -- Slide out
        local slideTween = tween(NotifContainer, {Position = UDim2.new(1, 340, NotifContainer.Position.Y.Scale, NotifContainer.Position.Y.Offset)}, 0.3, Enum.EasingStyle.Quad)
        slideTween.Completed:Wait()
        NotifContainer:Destroy()
        
        -- Reposition remaining notifications
        for i, notif in ipairs(self.Notifications) do
            tween(notif, {Position = UDim2.new(1, -330, 1, -100 - (i * 90))}, 0.3, Enum.EasingStyle.Quad)
        end
    end
    
    CloseBtn.MouseButton1Click:Connect(removeNotif)
    
    -- Auto dismiss
    task.delay(duration, removeNotif)
end

-- ========================================
-- THEME SYSTEM
-- ========================================

function PrestigeUI:SetTheme(themeName)
    if ThemePresets[themeName] then
        self.Theme = ThemePresets[themeName]
        self:ApplyTheme()
    end
end

function PrestigeUI:CreateCustomTheme(themeTable)
    if themeTable and type(themeTable) == "table" then
        self.Theme = {
            Primary = themeTable.Primary or Theme.Primary,
            Secondary = themeTable.Secondary or Theme.Secondary,
            Tertiary = themeTable.Tertiary or Theme.Tertiary,
            Text = themeTable.Text or Theme.Text,
            TextSecondary = themeTable.TextSecondary or Theme.TextSecondary,
            Dark = themeTable.Dark or Theme.Dark,
            Accent = themeTable.Accent or Theme.Accent
        }
        self:ApplyTheme()
    end
end

function PrestigeUI:ApplyTheme()
    -- Apply theme to main UI elements
    self.MainFrame.BackgroundColor3 = self.Theme.Dark
    self.TopBar.BackgroundColor3 = self.Theme.Secondary
    self.Sidebar.BackgroundColor3 = self.Theme.Secondary
    self.ContentArea.BackgroundColor3 = self.Theme.Secondary
    self.Title.TextColor3 = self.Theme.Text
    self.MinimizeBtn.BackgroundColor3 = self.Theme.Primary
    self.CloseBtn.BackgroundColor3 = self.Theme.Primary
    
    -- Apply to all tabs
    for name, tab in pairs(self.Tabs) do
        if self.ActiveTab == name then
            tab.Button.BackgroundColor3 = self.Theme.Primary
        else
            tab.Button.BackgroundColor3 = self.Theme.Tertiary
        end
    end
    
    self:SaveConfig()
end

-- ========================================
-- CONFIG SAVE/LOAD SYSTEM
-- ========================================

function PrestigeUI:SaveConfig()
    local config = {
        Theme = {},
        ActiveTab = self.ActiveTab,
        Elements = {}
    }
    
    -- Save theme
    for key, value in pairs(self.Theme) do
        config.Theme[key] = {value.R, value.G, value.B}
    end
    
    -- Save element states (toggles, sliders, etc.)
    config.Elements = self.ConfigData
    
    -- Encode and store
    local encoded = HttpService:JSONEncode(config)
    local key = "PrestigeUI_" .. game.Players.LocalPlayer.UserId
    
    -- Use _G as temporary storage (persists for session)
    _G[key] = encoded
end

function PrestigeUI:LoadConfig()
    local key = "PrestigeUI_" .. game.Players.LocalPlayer.UserId
    local encoded = _G[key]
    
    if encoded then
        local success, config = pcall(function()
            return HttpService:JSONDecode(encoded)
        end)
        
        if success and config then
            -- Load theme
            if config.Theme then
                local customTheme = {}
                for key, rgb in pairs(config.Theme) do
                    customTheme[key] = Color3.fromRGB(rgb[1], rgb[2], rgb[3])
                end
                self:CreateCustomTheme(customTheme)
            end
            
            -- Load element states
            if config.Elements then
                self.ConfigData = config.Elements
            end
        end
    end
end

-- ========================================
-- MINIMIZE TO CORNER
-- ========================================

function PrestigeUI:MinimizeToCorner()
    if self.MinimizedIcon then return end
    
    self.MainFrame.Visible = false
    
    local Icon = Instance.new("Frame")
    Icon.Name = "MinimizedIcon"
    Icon.Size = UDim2.new(0, 60, 0, 60)
    Icon.Position = UDim2.new(1, -80, 1, -80)
    Icon.BackgroundColor3 = self.Theme.Primary
    Icon.BorderSizePixel = 0
    Icon.Parent = self.ScreenGui
    
    local IconCorner = Instance.new("UICorner")
    IconCorner.CornerRadius = UDim.new(0, 15)
    IconCorner.Parent = Icon
    
    local IconText = Instance.new("TextLabel")
    IconText.Size = UDim2.new(1, 0, 1, 0)
    IconText.BackgroundTransparency = 1
    IconText.Text = "P"
    IconText.TextColor3 = self.Theme.Text
    IconText.Font = Enum.Font.GothamBold
    IconText.TextSize = 28
    IconText.Parent = Icon
    
    -- Drag functionality
    local dragging = false
    local dragInput, mousePos, framePos
    
    Icon.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = Icon.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Icon.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            Icon.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
    
    -- Hover animation
    Icon.MouseEnter:Connect(function()
        tween(Icon, {Size = UDim2.new(0, 70, 0, 70), BackgroundColor3 = Color3.fromRGB(10, 200, 255)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    Icon.MouseLeave:Connect(function()
        tween(Icon, {Size = UDim2.new(0, 60, 0, 60), BackgroundColor3 = self.Theme.Primary}, 0.2)
    end)
    
    self.MinimizedIcon = Icon
end

function PrestigeUI:RestoreFromCorner()
    if self.MinimizedIcon then
        local fadeOut = tween(self.MinimizedIcon, {BackgroundTransparency = 1}, 0.2)
        tween(self.MinimizedIcon:FindFirstChild("TextLabel"), {TextTransparency = 1}, 0.2)
        fadeOut.Completed:Wait()
        self.MinimizedIcon:Destroy()
        self.MinimizedIcon = nil
    end
    
    self.MainFrame.Visible = true
    tween(self.MainFrame, {Size = UDim2.new(0, 700, 0, 450)}, 0.4, Enum.EasingStyle.Back)
end

function PrestigeUI:SetKeybind(keyCode)
    self.ToggleKeybind = keyCode
end

-- ========================================
-- SEARCH BAR
-- ========================================

function PrestigeUI:AddSearchBar(parent)
    local Container = Instance.new("Frame")
    Container.Name = "SearchContainer"
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.BackgroundColor3 = self.Theme.Tertiary
    Container.BorderSizePixel = 0
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local SearchIcon = Instance.new("TextLabel")
    SearchIcon.Size = UDim2.new(0, 30, 1, 0)
    SearchIcon.BackgroundTransparency = 1
    SearchIcon.Text = "🔍"
    SearchIcon.TextColor3 = self.Theme.TextSecondary
    SearchIcon.Font = Enum.Font.Gotham
    SearchIcon.TextSize = 16
    SearchIcon.Parent = Container
    
    local SearchBox = Instance.new("TextBox")
    SearchBox.Name = "SearchBox"
    SearchBox.Size = UDim2.new(1, -40, 1, 0)
    SearchBox.Position = UDim2.new(0, 35, 0, 0)
    SearchBox.BackgroundTransparency = 1
    SearchBox.Text = ""
    SearchBox.PlaceholderText = "Search..."
    SearchBox.TextColor3 = self.Theme.Text
    SearchBox.PlaceholderColor3 = self.Theme.TextSecondary
    SearchBox.Font = Enum.Font.Gotham
    SearchBox.TextSize = 14
    SearchBox.TextXAlignment = Enum.TextXAlignment.Left
    SearchBox.ClearTextOnFocus = false
    SearchBox.Parent = Container
    
    -- Focus animations
    SearchBox.Focused:Connect(function()
        tween(Container, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}, 0.2)
        tween(SearchIcon, {TextColor3 = self.Theme.Primary}, 0.2)
    end)
    
    SearchBox.FocusLost:Connect(function()
        tween(Container, {BackgroundColor3 = self.Theme.Tertiary}, 0.2)
        tween(SearchIcon, {TextColor3 = self.Theme.TextSecondary}, 0.2)
    end)
    
    -- Search functionality
    SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
        local query = SearchBox.Text:lower()
        
        -- Filter tabs
        for name, tab in pairs(self.Tabs) do
            if query == "" or name:lower():find(query) then
                tab.Container.Visible = true
            else
                tab.Container.Visible = false
            end
        end
    end)
    
    return SearchBox
end

_G.PrestigeUI = PrestigeUI

return PrestigeUI
